// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `Login.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef __Login_h__
#define __Login_h__

#include <Ice/ProxyF.h>
#include <Ice/ObjectF.h>
#include <Ice/Exception.h>
#include <Ice/LocalObject.h>
#include <Ice/StreamHelpers.h>
#include <Ice/Proxy.h>
#include <Ice/Object.h>
#include <Ice/Outgoing.h>
#include <Ice/OutgoingAsync.h>
#include <Ice/Incoming.h>
#include <Ice/Direct.h>
#include <IceUtil/ScopedArray.h>
#include <IceUtil/Optional.h>
#include <Ice/StreamF.h>
#include <Ice/Identity.h>
#include <Ice/UndefSysMacros.h>
#include <Ice/Identity.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 305
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 1
#       error Ice patch level mismatch!
#   endif
#endif

namespace IceProxy
{

namespace Login
{

class LoginService;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::Login::LoginService>&);
::IceProxy::Ice::Object* upCast(::IceProxy::Login::LoginService*);

class LoginCallBack;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::Login::LoginCallBack>&);
::IceProxy::Ice::Object* upCast(::IceProxy::Login::LoginCallBack*);

}

}

namespace Login
{

class LoginService;
bool operator==(const LoginService&, const LoginService&);
bool operator<(const LoginService&, const LoginService&);
::Ice::Object* upCast(::Login::LoginService*);
typedef ::IceInternal::Handle< ::Login::LoginService> LoginServicePtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::Login::LoginService> LoginServicePrx;
void __patch(LoginServicePtr&, const ::Ice::ObjectPtr&);

class LoginCallBack;
bool operator==(const LoginCallBack&, const LoginCallBack&);
bool operator<(const LoginCallBack&, const LoginCallBack&);
::Ice::Object* upCast(::Login::LoginCallBack*);
typedef ::IceInternal::Handle< ::Login::LoginCallBack> LoginCallBackPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::Login::LoginCallBack> LoginCallBackPrx;
void __patch(LoginCallBackPtr&, const ::Ice::ObjectPtr&);

}

namespace Login
{

class Callback_LoginService_loginToService_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_LoginService_loginToService_Base> Callback_LoginService_loginToServicePtr;

class Callback_LoginService_loginoff_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_LoginService_loginoff_Base> Callback_LoginService_loginoffPtr;

class Callback_LoginCallBack_getName_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_LoginCallBack_getName_Base> Callback_LoginCallBack_getNamePtr;

class Callback_LoginCallBack_getVersion_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_LoginCallBack_getVersion_Base> Callback_LoginCallBack_getVersionPtr;

class Callback_LoginCallBack_setServerName_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_LoginCallBack_setServerName_Base> Callback_LoginCallBack_setServerNamePtr;

}

namespace IceProxy
{

namespace Login
{

class LoginService : virtual public ::IceProxy::Ice::Object
{
public:

    void loginToService(const ::Ice::Identity& id)
    {
        loginToService(id, 0);
    }
    void loginToService(const ::Ice::Identity& id, const ::Ice::Context& __ctx)
    {
        loginToService(id, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_loginToService(const ::Ice::Identity& id, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_loginToService(id, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_loginToService(const ::Ice::Identity& id, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_loginToService(id, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_loginToService(const ::Ice::Identity& id, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_loginToService(id, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_loginToService(const ::Ice::Identity& id, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_loginToService(id, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_loginToService(const ::Ice::Identity& id)
    {
        return begin_loginToService(id, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_loginToService(const ::Ice::Identity& id, const ::Ice::Context& __ctx)
    {
        return begin_loginToService(id, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_loginToService(const ::Ice::Identity& id, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_loginToService(id, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_loginToService(const ::Ice::Identity& id, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_loginToService(id, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_loginToService(const ::Ice::Identity& id, const ::Login::Callback_LoginService_loginToServicePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_loginToService(id, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_loginToService(const ::Ice::Identity& id, const ::Ice::Context& __ctx, const ::Login::Callback_LoginService_loginToServicePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_loginToService(id, &__ctx, __del, __cookie);
    }

    void end_loginToService(const ::Ice::AsyncResultPtr&);
    
private:

    void loginToService(const ::Ice::Identity&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_loginToService(const ::Ice::Identity&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void loginoff(const ::Ice::Identity& id)
    {
        loginoff(id, 0);
    }
    void loginoff(const ::Ice::Identity& id, const ::Ice::Context& __ctx)
    {
        loginoff(id, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_loginoff(const ::Ice::Identity& id, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_loginoff(id, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_loginoff(const ::Ice::Identity& id, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_loginoff(id, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_loginoff(const ::Ice::Identity& id, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_loginoff(id, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_loginoff(const ::Ice::Identity& id, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_loginoff(id, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_loginoff(const ::Ice::Identity& id)
    {
        return begin_loginoff(id, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_loginoff(const ::Ice::Identity& id, const ::Ice::Context& __ctx)
    {
        return begin_loginoff(id, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_loginoff(const ::Ice::Identity& id, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_loginoff(id, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_loginoff(const ::Ice::Identity& id, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_loginoff(id, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_loginoff(const ::Ice::Identity& id, const ::Login::Callback_LoginService_loginoffPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_loginoff(id, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_loginoff(const ::Ice::Identity& id, const ::Ice::Context& __ctx, const ::Login::Callback_LoginService_loginoffPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_loginoff(id, &__ctx, __del, __cookie);
    }

    void end_loginoff(const ::Ice::AsyncResultPtr&);
    
private:

    void loginoff(const ::Ice::Identity&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_loginoff(const ::Ice::Identity&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    
    ::IceInternal::ProxyHandle<LoginService> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<LoginService*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<LoginService> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<LoginService*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<LoginService> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<LoginService*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<LoginService> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<LoginService*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<LoginService> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<LoginService*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<LoginService> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<LoginService*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<LoginService> ice_secure(bool __secure) const
    {
        return dynamic_cast<LoginService*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<LoginService> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<LoginService*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<LoginService> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<LoginService*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<LoginService> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<LoginService*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<LoginService> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<LoginService*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<LoginService> ice_twoway() const
    {
        return dynamic_cast<LoginService*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<LoginService> ice_oneway() const
    {
        return dynamic_cast<LoginService*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<LoginService> ice_batchOneway() const
    {
        return dynamic_cast<LoginService*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<LoginService> ice_datagram() const
    {
        return dynamic_cast<LoginService*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<LoginService> ice_batchDatagram() const
    {
        return dynamic_cast<LoginService*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<LoginService> ice_compress(bool __compress) const
    {
        return dynamic_cast<LoginService*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<LoginService> ice_timeout(int __timeout) const
    {
        return dynamic_cast<LoginService*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<LoginService> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<LoginService*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<LoginService> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<LoginService*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    static const ::std::string& ice_staticId();

private: 

    virtual ::IceInternal::Handle< ::IceDelegateM::Ice::Object> __createDelegateM();
    virtual ::IceInternal::Handle< ::IceDelegateD::Ice::Object> __createDelegateD();
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

class LoginCallBack : virtual public ::IceProxy::Ice::Object
{
public:

    ::std::string getName()
    {
        return getName(0);
    }
    ::std::string getName(const ::Ice::Context& __ctx)
    {
        return getName(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getName(const ::IceInternal::Function<void (const ::std::string&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getName(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getName(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getName(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getName(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::std::string&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getName(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getName(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getName(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getName(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::std::string&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::std::string&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::Login::LoginCallBackPrx __proxy = ::Login::LoginCallBackPrx::uncheckedCast(__result->getProxy());
                ::std::string __ret;
                try
                {
                    __ret = __proxy->end_getName(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::std::string&)> _response;
        };
        return begin_getName(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getName()
    {
        return begin_getName(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getName(const ::Ice::Context& __ctx)
    {
        return begin_getName(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getName(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getName(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getName(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getName(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getName(const ::Login::Callback_LoginCallBack_getNamePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getName(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getName(const ::Ice::Context& __ctx, const ::Login::Callback_LoginCallBack_getNamePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getName(&__ctx, __del, __cookie);
    }

    ::std::string end_getName(const ::Ice::AsyncResultPtr&);
    
private:

    ::std::string getName(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getName(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::std::string getVersion()
    {
        return getVersion(0);
    }
    ::std::string getVersion(const ::Ice::Context& __ctx)
    {
        return getVersion(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getVersion(const ::IceInternal::Function<void (const ::std::string&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getVersion(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getVersion(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getVersion(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getVersion(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::std::string&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getVersion(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getVersion(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getVersion(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getVersion(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::std::string&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::std::string&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::Login::LoginCallBackPrx __proxy = ::Login::LoginCallBackPrx::uncheckedCast(__result->getProxy());
                ::std::string __ret;
                try
                {
                    __ret = __proxy->end_getVersion(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::std::string&)> _response;
        };
        return begin_getVersion(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getVersion()
    {
        return begin_getVersion(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getVersion(const ::Ice::Context& __ctx)
    {
        return begin_getVersion(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getVersion(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getVersion(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getVersion(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getVersion(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getVersion(const ::Login::Callback_LoginCallBack_getVersionPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getVersion(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getVersion(const ::Ice::Context& __ctx, const ::Login::Callback_LoginCallBack_getVersionPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getVersion(&__ctx, __del, __cookie);
    }

    ::std::string end_getVersion(const ::Ice::AsyncResultPtr&);
    
private:

    ::std::string getVersion(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getVersion(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void setServerName(const ::std::string& strServerName)
    {
        setServerName(strServerName, 0);
    }
    void setServerName(const ::std::string& strServerName, const ::Ice::Context& __ctx)
    {
        setServerName(strServerName, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_setServerName(const ::std::string& strServerName, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_setServerName(strServerName, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_setServerName(const ::std::string& strServerName, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setServerName(strServerName, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setServerName(const ::std::string& strServerName, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_setServerName(strServerName, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setServerName(const ::std::string& strServerName, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setServerName(strServerName, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_setServerName(const ::std::string& strServerName)
    {
        return begin_setServerName(strServerName, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setServerName(const ::std::string& strServerName, const ::Ice::Context& __ctx)
    {
        return begin_setServerName(strServerName, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setServerName(const ::std::string& strServerName, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setServerName(strServerName, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setServerName(const ::std::string& strServerName, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setServerName(strServerName, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setServerName(const ::std::string& strServerName, const ::Login::Callback_LoginCallBack_setServerNamePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setServerName(strServerName, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setServerName(const ::std::string& strServerName, const ::Ice::Context& __ctx, const ::Login::Callback_LoginCallBack_setServerNamePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setServerName(strServerName, &__ctx, __del, __cookie);
    }

    void end_setServerName(const ::Ice::AsyncResultPtr&);
    
private:

    void setServerName(const ::std::string&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_setServerName(const ::std::string&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    
    ::IceInternal::ProxyHandle<LoginCallBack> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<LoginCallBack*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<LoginCallBack> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<LoginCallBack*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<LoginCallBack> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<LoginCallBack*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<LoginCallBack> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<LoginCallBack*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<LoginCallBack> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<LoginCallBack*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<LoginCallBack> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<LoginCallBack*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<LoginCallBack> ice_secure(bool __secure) const
    {
        return dynamic_cast<LoginCallBack*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<LoginCallBack> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<LoginCallBack*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<LoginCallBack> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<LoginCallBack*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<LoginCallBack> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<LoginCallBack*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<LoginCallBack> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<LoginCallBack*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<LoginCallBack> ice_twoway() const
    {
        return dynamic_cast<LoginCallBack*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<LoginCallBack> ice_oneway() const
    {
        return dynamic_cast<LoginCallBack*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<LoginCallBack> ice_batchOneway() const
    {
        return dynamic_cast<LoginCallBack*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<LoginCallBack> ice_datagram() const
    {
        return dynamic_cast<LoginCallBack*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<LoginCallBack> ice_batchDatagram() const
    {
        return dynamic_cast<LoginCallBack*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<LoginCallBack> ice_compress(bool __compress) const
    {
        return dynamic_cast<LoginCallBack*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<LoginCallBack> ice_timeout(int __timeout) const
    {
        return dynamic_cast<LoginCallBack*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<LoginCallBack> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<LoginCallBack*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<LoginCallBack> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<LoginCallBack*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    static const ::std::string& ice_staticId();

private: 

    virtual ::IceInternal::Handle< ::IceDelegateM::Ice::Object> __createDelegateM();
    virtual ::IceInternal::Handle< ::IceDelegateD::Ice::Object> __createDelegateD();
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

}

}

namespace IceDelegate
{

namespace Login
{

class LoginService : virtual public ::IceDelegate::Ice::Object
{
public:

    virtual void loginToService(const ::Ice::Identity&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void loginoff(const ::Ice::Identity&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;
};

class LoginCallBack : virtual public ::IceDelegate::Ice::Object
{
public:

    virtual ::std::string getName(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::std::string getVersion(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void setServerName(const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;
};

}

}

namespace IceDelegateM
{

namespace Login
{

class LoginService : virtual public ::IceDelegate::Login::LoginService,
                     virtual public ::IceDelegateM::Ice::Object
{
public:

    virtual void loginToService(const ::Ice::Identity&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void loginoff(const ::Ice::Identity&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);
};

class LoginCallBack : virtual public ::IceDelegate::Login::LoginCallBack,
                      virtual public ::IceDelegateM::Ice::Object
{
public:

    virtual ::std::string getName(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::std::string getVersion(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void setServerName(const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);
};

}

}

namespace IceDelegateD
{

namespace Login
{

class LoginService : virtual public ::IceDelegate::Login::LoginService,
                     virtual public ::IceDelegateD::Ice::Object
{
public:

    virtual void loginToService(const ::Ice::Identity&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void loginoff(const ::Ice::Identity&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);
};

class LoginCallBack : virtual public ::IceDelegate::Login::LoginCallBack,
                      virtual public ::IceDelegateD::Ice::Object
{
public:

    virtual ::std::string getName(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::std::string getVersion(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void setServerName(const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);
};

}

}

namespace Login
{

class LoginService : virtual public ::Ice::Object
{
public:

    typedef LoginServicePrx ProxyType;
    typedef LoginServicePtr PointerType;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();

    virtual void loginToService(const ::Ice::Identity&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___loginToService(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void loginoff(const ::Ice::Identity&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___loginoff(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::DispatchStatus __dispatch(::IceInternal::Incoming&, const ::Ice::Current&);

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    #ifdef __SUNPRO_CC
    using ::Ice::Object::__writeImpl;
    using ::Ice::Object::__readImpl;
    #endif
};

inline bool operator==(const LoginService& l, const LoginService& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const LoginService& l, const LoginService& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

class LoginCallBack : virtual public ::Ice::Object
{
public:

    typedef LoginCallBackPrx ProxyType;
    typedef LoginCallBackPtr PointerType;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();

    virtual ::std::string getName(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getName(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::std::string getVersion(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getVersion(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void setServerName(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___setServerName(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::DispatchStatus __dispatch(::IceInternal::Incoming&, const ::Ice::Current&);

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    #ifdef __SUNPRO_CC
    using ::Ice::Object::__writeImpl;
    using ::Ice::Object::__readImpl;
    #endif
};

inline bool operator==(const LoginCallBack& l, const LoginCallBack& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const LoginCallBack& l, const LoginCallBack& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

}

namespace Login
{

template<class T>
class CallbackNC_LoginService_loginToService : public Callback_LoginService_loginToService_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_LoginService_loginToService(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_LoginService_loginToServicePtr
newCallback_LoginService_loginToService(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_LoginService_loginToService<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_LoginService_loginToServicePtr
newCallback_LoginService_loginToService(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_LoginService_loginToService<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_LoginService_loginToServicePtr
newCallback_LoginService_loginToService(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_LoginService_loginToService<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_LoginService_loginToServicePtr
newCallback_LoginService_loginToService(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_LoginService_loginToService<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_LoginService_loginToService : public Callback_LoginService_loginToService_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_LoginService_loginToService(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_LoginService_loginToServicePtr
newCallback_LoginService_loginToService(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_LoginService_loginToService<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_LoginService_loginToServicePtr
newCallback_LoginService_loginToService(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_LoginService_loginToService<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_LoginService_loginToServicePtr
newCallback_LoginService_loginToService(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_LoginService_loginToService<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_LoginService_loginToServicePtr
newCallback_LoginService_loginToService(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_LoginService_loginToService<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_LoginService_loginoff : public Callback_LoginService_loginoff_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_LoginService_loginoff(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_LoginService_loginoffPtr
newCallback_LoginService_loginoff(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_LoginService_loginoff<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_LoginService_loginoffPtr
newCallback_LoginService_loginoff(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_LoginService_loginoff<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_LoginService_loginoffPtr
newCallback_LoginService_loginoff(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_LoginService_loginoff<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_LoginService_loginoffPtr
newCallback_LoginService_loginoff(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_LoginService_loginoff<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_LoginService_loginoff : public Callback_LoginService_loginoff_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_LoginService_loginoff(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_LoginService_loginoffPtr
newCallback_LoginService_loginoff(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_LoginService_loginoff<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_LoginService_loginoffPtr
newCallback_LoginService_loginoff(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_LoginService_loginoff<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_LoginService_loginoffPtr
newCallback_LoginService_loginoff(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_LoginService_loginoff<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_LoginService_loginoffPtr
newCallback_LoginService_loginoff(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_LoginService_loginoff<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_LoginCallBack_getName : public Callback_LoginCallBack_getName_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::std::string&);

    CallbackNC_LoginCallBack_getName(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Login::LoginCallBackPrx __proxy = ::Login::LoginCallBackPrx::uncheckedCast(__result->getProxy());
        ::std::string __ret;
        try
        {
            __ret = __proxy->end_getName(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_LoginCallBack_getNamePtr
newCallback_LoginCallBack_getName(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::std::string&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_LoginCallBack_getName<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_LoginCallBack_getNamePtr
newCallback_LoginCallBack_getName(T* instance, void (T::*cb)(const ::std::string&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_LoginCallBack_getName<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_LoginCallBack_getName : public Callback_LoginCallBack_getName_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::std::string&, const CT&);

    Callback_LoginCallBack_getName(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Login::LoginCallBackPrx __proxy = ::Login::LoginCallBackPrx::uncheckedCast(__result->getProxy());
        ::std::string __ret;
        try
        {
            __ret = __proxy->end_getName(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_LoginCallBack_getNamePtr
newCallback_LoginCallBack_getName(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::std::string&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_LoginCallBack_getName<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_LoginCallBack_getNamePtr
newCallback_LoginCallBack_getName(T* instance, void (T::*cb)(const ::std::string&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_LoginCallBack_getName<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_LoginCallBack_getVersion : public Callback_LoginCallBack_getVersion_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::std::string&);

    CallbackNC_LoginCallBack_getVersion(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Login::LoginCallBackPrx __proxy = ::Login::LoginCallBackPrx::uncheckedCast(__result->getProxy());
        ::std::string __ret;
        try
        {
            __ret = __proxy->end_getVersion(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_LoginCallBack_getVersionPtr
newCallback_LoginCallBack_getVersion(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::std::string&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_LoginCallBack_getVersion<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_LoginCallBack_getVersionPtr
newCallback_LoginCallBack_getVersion(T* instance, void (T::*cb)(const ::std::string&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_LoginCallBack_getVersion<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_LoginCallBack_getVersion : public Callback_LoginCallBack_getVersion_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::std::string&, const CT&);

    Callback_LoginCallBack_getVersion(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Login::LoginCallBackPrx __proxy = ::Login::LoginCallBackPrx::uncheckedCast(__result->getProxy());
        ::std::string __ret;
        try
        {
            __ret = __proxy->end_getVersion(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_LoginCallBack_getVersionPtr
newCallback_LoginCallBack_getVersion(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::std::string&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_LoginCallBack_getVersion<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_LoginCallBack_getVersionPtr
newCallback_LoginCallBack_getVersion(T* instance, void (T::*cb)(const ::std::string&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_LoginCallBack_getVersion<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_LoginCallBack_setServerName : public Callback_LoginCallBack_setServerName_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_LoginCallBack_setServerName(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_LoginCallBack_setServerNamePtr
newCallback_LoginCallBack_setServerName(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_LoginCallBack_setServerName<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_LoginCallBack_setServerNamePtr
newCallback_LoginCallBack_setServerName(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_LoginCallBack_setServerName<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_LoginCallBack_setServerNamePtr
newCallback_LoginCallBack_setServerName(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_LoginCallBack_setServerName<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_LoginCallBack_setServerNamePtr
newCallback_LoginCallBack_setServerName(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_LoginCallBack_setServerName<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_LoginCallBack_setServerName : public Callback_LoginCallBack_setServerName_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_LoginCallBack_setServerName(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_LoginCallBack_setServerNamePtr
newCallback_LoginCallBack_setServerName(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_LoginCallBack_setServerName<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_LoginCallBack_setServerNamePtr
newCallback_LoginCallBack_setServerName(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_LoginCallBack_setServerName<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_LoginCallBack_setServerNamePtr
newCallback_LoginCallBack_setServerName(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_LoginCallBack_setServerName<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_LoginCallBack_setServerNamePtr
newCallback_LoginCallBack_setServerName(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_LoginCallBack_setServerName<T, CT>(instance, 0, excb, sentcb);
}

}

#endif
