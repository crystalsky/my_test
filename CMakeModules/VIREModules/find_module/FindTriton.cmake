# Find TRITON toolkit
# This module defines
# TRITON_FOUND
# TRITON_INCLUDE_DIR
# On windows:
#   TRITON_LIBRARY_DEBUG
#   TRITON_LIBRARY_RELEASE
# On other platforms
#   TRITON_LIBRARY
#
set(THIS_LIB_DEPEND_NAME TRITON)

IF (MSVC90)
	IF (CMAKE_CL_64)
		SET(TRITON_ARCH "vc9/x64")
	ELSE (CMAKE_CL_64)
		SET(TRITON_ARCH "vc9")
	ENDIF (CMAKE_CL_64)
ENDIF (MSVC90)

IF (MSVC80)
	IF (CMAKE_CL_64)
		SET(TRITON_ARCH "vc8/x64")
	ELSE (CMAKE_CL_64)
		SET(TRITON_ARCH "vc8")
	ENDIF (CMAKE_CL_64)
ENDIF (MSVC80)

IF (MSVC10)
	IF (CMAKE_CL_64)
		SET(TRITON_ARCH "vc100/x64")
	ELSE (CMAKE_CL_64)
		SET(TRITON_ARCH "vc100")
	ENDIF (CMAKE_CL_64)
ENDIF (MSVC10)

IF (MSVC11)
	IF (CMAKE_CL_64)
		SET(TRITON_ARCH "vc110/x64")
	ELSE (CMAKE_CL_64)
		SET(TRITON_ARCH "vc110")
	ENDIF (CMAKE_CL_64)
ENDIF (MSVC11)

IF (MSVC71)
	SET(TRITON_ARCH "vc7")
ENDIF (MSVC71)

IF (UNIX)
	SET(TRITON_ARCH "linux")
ENDIF (UNIX)

FIND_PATH(${THIS_LIB_DEPEND_NAME}_INCLUDE_DIR Triton.h
    "${TRITON_DIR}/Public Headers"
    "$ENV{TRITON_PATH}/Public Headers"
    $ENV{TRITON_PATH}
    ${TRITON_DIR}/include
    $ENV{TRITON_DIR}/include
    $ENV{TRITON_DIR}
    /usr/local/include
    /usr/include
    /sw/include # Fink
    /opt/local/include # DarwinPorts
    /opt/csw/include # Blastwave
    /opt/include
    /usr/freeware/include
)

MACRO(FIND_TRITON_LIBRARY MYLIBRARY MYLIBRARYNAME)

    FIND_LIBRARY(${MYLIBRARY}
    NAMES ${MYLIBRARYNAME}
    PATHS
		${TRITON_DIR}/lib
		$ENV{TRITON_DIR}/lib
		$ENV{TRITON_DIR}
		$ENV{TRITON_PATH}/lib
		/usr/local/lib
		/usr/lib
		/sw/lib
		/opt/local/lib
		/opt/csw/lib
		/opt/lib
		/usr/freeware/lib64
	PATH_SUFFIXES
		${TRITON_ARCH}
    )

ENDMACRO(FIND_TRITON_LIBRARY MYLIBRARY MYLIBRARYNAME)

FIND_TRITON_LIBRARY(TRITON_LIBRARY "Triton-MT-DLL")
FIND_TRITON_LIBRARY(TRITON_LIBRARY_DEBUG "Triton-MTD-DLL")

#验证变量合法
include(macro_find_package_handle_standard_args)
FIND_PACKAGE_HANDLE_STANDARD_ARGS(
	${THIS_LIB_DEPEND_NAME} 
	DEFAULT_MSG
	${THIS_LIB_DEPEND_NAME}_LIBRARY 
	${THIS_LIB_DEPEND_NAME}_INCLUDE_DIR 
	${THIS_LIB_DEPEND_NAME}_LIBRARY_DEBUG
)

IF (${THIS_LIB_DEPEND_NAME}_FOUND)
   IF (NOT ${THIS_LIB_DEPEND_NAME}_FIND_QUIETLY)
      MESSAGE(STATUS "Found ${THIS_LIB_DEPEND_NAME}: ${${THIS_LIB_DEPEND_NAME}_LIBRARY_RELEASE}")
   ENDIF (NOT ${THIS_LIB_DEPEND_NAME}_FIND_QUIETLY)
ELSE (${THIS_LIB_DEPEND_NAME}_FOUND)
   IF (${THIS_LIB_DEPEND_NAME}_FIND_REQUIRED)
      MESSAGE(FATAL_ERROR "Could not find ${THIS_LIB_DEPEND_NAME}")
   ENDIF (${THIS_LIB_DEPEND_NAME}_FIND_REQUIRED)
ENDIF (${THIS_LIB_DEPEND_NAME}_FOUND)

if(${THIS_LIB_DEPEND_NAME}_FOUND)
	set(${THIS_LIB_DEPEND_NAME}_LIBRARIES ${${THIS_LIB_DEPEND_NAME}_LIBRARY_DEBUG} ${${THIS_LIB_DEPEND_NAME}_LIBRARY})
	
	include(util.common_make_import_target)
	COMMON_MAKE_IMPORT_TARGET(${THIS_LIB_DEPEND_NAME} 
		${${THIS_LIB_DEPEND_NAME}_INCLUDE_DIR}
		${${THIS_LIB_DEPEND_NAME}_LIBRARY_DEBUG}
		${${THIS_LIB_DEPEND_NAME}_LIBRARY}
	)

	mark_as_advanced(
		${THIS_LIB_DEPEND_NAME}_INCLUDE_DIR
		${THIS_LIB_DEPEND_NAME}_LIBRARY
		${THIS_LIB_DEPEND_NAME}_LIBRARY_DEBUG
	)
endif()
