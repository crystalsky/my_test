// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `DSSDataService.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef __DSSDataService_h__
#define __DSSDataService_h__

#include <Ice/ProxyF.h>
#include <Ice/ObjectF.h>
#include <Ice/Exception.h>
#include <Ice/LocalObject.h>
#include <Ice/StreamHelpers.h>
#include <Ice/Proxy.h>
#include <Ice/Object.h>
#include <Ice/Outgoing.h>
#include <Ice/OutgoingAsync.h>
#include <Ice/Incoming.h>
#include <Ice/Direct.h>
#include <Ice/FactoryTableInit.h>
#include <IceUtil/ScopedArray.h>
#include <IceUtil/Optional.h>
#include <Ice/StreamF.h>
#include <Ice/Identity.h>
#include <Ice/UndefSysMacros.h>
#include <Ice/Identity.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 305
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 1
#       error Ice patch level mismatch!
#   endif
#endif

namespace IceProxy
{

namespace DSSDataService
{

class DSSServiceCallBack;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::DSSDataService::DSSServiceCallBack>&);
::IceProxy::Ice::Object* upCast(::IceProxy::DSSDataService::DSSServiceCallBack*);

class DSSService;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::DSSDataService::DSSService>&);
::IceProxy::Ice::Object* upCast(::IceProxy::DSSDataService::DSSService*);

}

}

namespace DSSDataService
{

class DSSServiceCallBack;
bool operator==(const DSSServiceCallBack&, const DSSServiceCallBack&);
bool operator<(const DSSServiceCallBack&, const DSSServiceCallBack&);
::Ice::Object* upCast(::DSSDataService::DSSServiceCallBack*);
typedef ::IceInternal::Handle< ::DSSDataService::DSSServiceCallBack> DSSServiceCallBackPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::DSSDataService::DSSServiceCallBack> DSSServiceCallBackPrx;
void __patch(DSSServiceCallBackPtr&, const ::Ice::ObjectPtr&);

class DSSService;
bool operator==(const DSSService&, const DSSService&);
bool operator<(const DSSService&, const DSSService&);
::Ice::Object* upCast(::DSSDataService::DSSService*);
typedef ::IceInternal::Handle< ::DSSDataService::DSSService> DSSServicePtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::DSSDataService::DSSService> DSSServicePrx;
void __patch(DSSServicePtr&, const ::Ice::ObjectPtr&);

}

namespace DSSDataService
{

enum emTaskType
{
    TaskTestDataRecv,
    TaskFileTransfer,
    TaskCaculate,
    TaskDataTrans,
    TaskOther
};

typedef ::std::vector< ::Ice::Byte> ArrayData;

class TaskRequest : public IceUtil::Shared
{
public:
    
    TaskRequest() {}
    TaskRequest(::DSSDataService::emTaskType __ice_TaskType, const ::std::string& __ice_strTaskID, const ::std::string& __ice_strTaskUserID, const ::DSSDataService::ArrayData& __ice_arrAddtionalData, ::Ice::Int __ice_nAddtionalDataCRC) :
        TaskType(__ice_TaskType),
        strTaskID(__ice_strTaskID),
        strTaskUserID(__ice_strTaskUserID),
        arrAddtionalData(__ice_arrAddtionalData),
        nAddtionalDataCRC(__ice_nAddtionalDataCRC)
    {
    }
    

    ::DSSDataService::emTaskType TaskType;
    ::std::string strTaskID;
    ::std::string strTaskUserID;
    ::DSSDataService::ArrayData arrAddtionalData;
    ::Ice::Int nAddtionalDataCRC;
};

typedef ::IceUtil::Handle< ::DSSDataService::TaskRequest> TaskRequestPtr;

class TaskRequestResult : public IceUtil::Shared
{
public:
    
    TaskRequestResult() {}
    TaskRequestResult(const ::DSSDataService::TaskRequestPtr& __ice_objRequst, ::Ice::Int __ice_nResultCode, const ::std::string& __ice_strComment) :
        objRequst(__ice_objRequst),
        nResultCode(__ice_nResultCode),
        strComment(__ice_strComment)
    {
    }
    

    ::DSSDataService::TaskRequestPtr objRequst;
    ::Ice::Int nResultCode;
    ::std::string strComment;
};

typedef ::IceUtil::Handle< ::DSSDataService::TaskRequestResult> TaskRequestResultPtr;

class TaskResultData : public IceUtil::Shared
{
public:
    
    TaskResultData() {}
    TaskResultData(const ::DSSDataService::TaskRequestResultPtr& __ice_objRequestAck, const ::DSSDataService::ArrayData& __ice_arrPackageData, ::Ice::Int __ice_nPackageCRC) :
        objRequestAck(__ice_objRequestAck),
        arrPackageData(__ice_arrPackageData),
        nPackageCRC(__ice_nPackageCRC)
    {
    }
    

    ::DSSDataService::TaskRequestResultPtr objRequestAck;
    ::DSSDataService::ArrayData arrPackageData;
    ::Ice::Int nPackageCRC;
};

typedef ::IceUtil::Handle< ::DSSDataService::TaskResultData> TaskResultDataPtr;

class RequestCanceledException : public ::Ice::UserException
{
public:

    RequestCanceledException() {}
    virtual ~RequestCanceledException() throw();

    virtual ::std::string ice_name() const;
    virtual RequestCanceledException* ice_clone() const;
    virtual void ice_throw() const;

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    #ifdef __SUNPRO_CC
    using ::Ice::UserException::__writeImpl;
    using ::Ice::UserException::__readImpl;
    #endif
};

static RequestCanceledException __RequestCanceledException_init;

}

namespace Ice
{
template<>
struct StreamableTraits< ::DSSDataService::emTaskType>
{
    static const StreamHelperCategory helper = StreamHelperCategoryEnum;
    static const int minValue = 0;
    static const int maxValue = 4;
    static const int minWireSize = 1;
    static const bool fixedLength = false;
};

template<>
struct StreamableTraits< ::DSSDataService::TaskRequestPtr>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStructClass;
    static const int minWireSize = 8;
    static const bool fixedLength = false;
};

template<class S>
struct StreamWriter< ::DSSDataService::TaskRequestPtr, S>
{
    static void write(S* __os, const ::DSSDataService::TaskRequestPtr& v)
    {
        __os->write(v->TaskType);
        __os->write(v->strTaskID);
        __os->write(v->strTaskUserID);
        __os->write(v->arrAddtionalData);
        __os->write(v->nAddtionalDataCRC);
    }
};

template<class S>
struct StreamReader< ::DSSDataService::TaskRequestPtr, S>
{
    static void read(S* __is, ::DSSDataService::TaskRequestPtr& v)
    {
        __is->read(v->TaskType);
        __is->read(v->strTaskID);
        __is->read(v->strTaskUserID);
        __is->read(v->arrAddtionalData);
        __is->read(v->nAddtionalDataCRC);
    }
};

template<>
struct StreamableTraits< ::DSSDataService::TaskRequestResultPtr>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStructClass;
    static const int minWireSize = 13;
    static const bool fixedLength = false;
};

template<class S>
struct StreamWriter< ::DSSDataService::TaskRequestResultPtr, S>
{
    static void write(S* __os, const ::DSSDataService::TaskRequestResultPtr& v)
    {
        __os->write(v->objRequst);
        __os->write(v->nResultCode);
        __os->write(v->strComment);
    }
};

template<class S>
struct StreamReader< ::DSSDataService::TaskRequestResultPtr, S>
{
    static void read(S* __is, ::DSSDataService::TaskRequestResultPtr& v)
    {
        __is->read(v->objRequst);
        __is->read(v->nResultCode);
        __is->read(v->strComment);
    }
};

template<>
struct StreamableTraits< ::DSSDataService::TaskResultDataPtr>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStructClass;
    static const int minWireSize = 18;
    static const bool fixedLength = false;
};

template<class S>
struct StreamWriter< ::DSSDataService::TaskResultDataPtr, S>
{
    static void write(S* __os, const ::DSSDataService::TaskResultDataPtr& v)
    {
        __os->write(v->objRequestAck);
        __os->write(v->arrPackageData);
        __os->write(v->nPackageCRC);
    }
};

template<class S>
struct StreamReader< ::DSSDataService::TaskResultDataPtr, S>
{
    static void read(S* __is, ::DSSDataService::TaskResultDataPtr& v)
    {
        __is->read(v->objRequestAck);
        __is->read(v->arrPackageData);
        __is->read(v->nPackageCRC);
    }
};

template<>
struct StreamableTraits< ::DSSDataService::RequestCanceledException>
{
    static const StreamHelperCategory helper = StreamHelperCategoryUserException;
};

}

namespace DSSDataService
{

class Callback_DSSServiceCallBack_getName_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_DSSServiceCallBack_getName_Base> Callback_DSSServiceCallBack_getNamePtr;

class Callback_DSSServiceCallBack_setReuestResult_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_DSSServiceCallBack_setReuestResult_Base> Callback_DSSServiceCallBack_setReuestResultPtr;

class Callback_DSSService_loginOn_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_DSSService_loginOn_Base> Callback_DSSService_loginOnPtr;

class Callback_DSSService_loginOff_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_DSSService_loginOff_Base> Callback_DSSService_loginOffPtr;

class Callback_DSSService_requestData_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_DSSService_requestData_Base> Callback_DSSService_requestDataPtr;

}

namespace IceProxy
{

namespace DSSDataService
{

class DSSServiceCallBack : virtual public ::IceProxy::Ice::Object
{
public:

    ::std::string getName()
    {
        return getName(0);
    }
    ::std::string getName(const ::Ice::Context& __ctx)
    {
        return getName(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getName(const ::IceInternal::Function<void (const ::std::string&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getName(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getName(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getName(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getName(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::std::string&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getName(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getName(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getName(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getName(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::std::string&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::std::string&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::DSSDataService::DSSServiceCallBackPrx __proxy = ::DSSDataService::DSSServiceCallBackPrx::uncheckedCast(__result->getProxy());
                ::std::string __ret;
                try
                {
                    __ret = __proxy->end_getName(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::std::string&)> _response;
        };
        return begin_getName(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getName()
    {
        return begin_getName(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getName(const ::Ice::Context& __ctx)
    {
        return begin_getName(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getName(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getName(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getName(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getName(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getName(const ::DSSDataService::Callback_DSSServiceCallBack_getNamePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getName(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getName(const ::Ice::Context& __ctx, const ::DSSDataService::Callback_DSSServiceCallBack_getNamePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getName(&__ctx, __del, __cookie);
    }

    ::std::string end_getName(const ::Ice::AsyncResultPtr&);
    
private:

    ::std::string getName(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getName(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void setReuestResult(const ::DSSDataService::TaskResultDataPtr& resultData)
    {
        setReuestResult(resultData, 0);
    }
    void setReuestResult(const ::DSSDataService::TaskResultDataPtr& resultData, const ::Ice::Context& __ctx)
    {
        setReuestResult(resultData, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_setReuestResult(const ::DSSDataService::TaskResultDataPtr& resultData, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_setReuestResult(resultData, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_setReuestResult(const ::DSSDataService::TaskResultDataPtr& resultData, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setReuestResult(resultData, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setReuestResult(const ::DSSDataService::TaskResultDataPtr& resultData, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_setReuestResult(resultData, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setReuestResult(const ::DSSDataService::TaskResultDataPtr& resultData, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setReuestResult(resultData, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_setReuestResult(const ::DSSDataService::TaskResultDataPtr& resultData)
    {
        return begin_setReuestResult(resultData, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setReuestResult(const ::DSSDataService::TaskResultDataPtr& resultData, const ::Ice::Context& __ctx)
    {
        return begin_setReuestResult(resultData, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setReuestResult(const ::DSSDataService::TaskResultDataPtr& resultData, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setReuestResult(resultData, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setReuestResult(const ::DSSDataService::TaskResultDataPtr& resultData, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setReuestResult(resultData, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setReuestResult(const ::DSSDataService::TaskResultDataPtr& resultData, const ::DSSDataService::Callback_DSSServiceCallBack_setReuestResultPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setReuestResult(resultData, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setReuestResult(const ::DSSDataService::TaskResultDataPtr& resultData, const ::Ice::Context& __ctx, const ::DSSDataService::Callback_DSSServiceCallBack_setReuestResultPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setReuestResult(resultData, &__ctx, __del, __cookie);
    }

    void end_setReuestResult(const ::Ice::AsyncResultPtr&);
    
private:

    void setReuestResult(const ::DSSDataService::TaskResultDataPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_setReuestResult(const ::DSSDataService::TaskResultDataPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    
    ::IceInternal::ProxyHandle<DSSServiceCallBack> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<DSSServiceCallBack*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<DSSServiceCallBack> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<DSSServiceCallBack*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<DSSServiceCallBack> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<DSSServiceCallBack*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<DSSServiceCallBack> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<DSSServiceCallBack*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<DSSServiceCallBack> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<DSSServiceCallBack*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<DSSServiceCallBack> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<DSSServiceCallBack*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<DSSServiceCallBack> ice_secure(bool __secure) const
    {
        return dynamic_cast<DSSServiceCallBack*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<DSSServiceCallBack> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<DSSServiceCallBack*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<DSSServiceCallBack> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<DSSServiceCallBack*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<DSSServiceCallBack> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<DSSServiceCallBack*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<DSSServiceCallBack> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<DSSServiceCallBack*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<DSSServiceCallBack> ice_twoway() const
    {
        return dynamic_cast<DSSServiceCallBack*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<DSSServiceCallBack> ice_oneway() const
    {
        return dynamic_cast<DSSServiceCallBack*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<DSSServiceCallBack> ice_batchOneway() const
    {
        return dynamic_cast<DSSServiceCallBack*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<DSSServiceCallBack> ice_datagram() const
    {
        return dynamic_cast<DSSServiceCallBack*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<DSSServiceCallBack> ice_batchDatagram() const
    {
        return dynamic_cast<DSSServiceCallBack*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<DSSServiceCallBack> ice_compress(bool __compress) const
    {
        return dynamic_cast<DSSServiceCallBack*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<DSSServiceCallBack> ice_timeout(int __timeout) const
    {
        return dynamic_cast<DSSServiceCallBack*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<DSSServiceCallBack> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<DSSServiceCallBack*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<DSSServiceCallBack> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<DSSServiceCallBack*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    static const ::std::string& ice_staticId();

private: 

    virtual ::IceInternal::Handle< ::IceDelegateM::Ice::Object> __createDelegateM();
    virtual ::IceInternal::Handle< ::IceDelegateD::Ice::Object> __createDelegateD();
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

class DSSService : virtual public ::IceProxy::Ice::Object
{
public:

    bool loginOn(const ::DSSDataService::DSSServiceCallBackPrx& pxy)
    {
        return loginOn(pxy, 0);
    }
    bool loginOn(const ::DSSDataService::DSSServiceCallBackPrx& pxy, const ::Ice::Context& __ctx)
    {
        return loginOn(pxy, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_loginOn(const ::DSSDataService::DSSServiceCallBackPrx& pxy, const ::IceInternal::Function<void (bool)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_loginOn(pxy, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_loginOn(const ::DSSDataService::DSSServiceCallBackPrx& pxy, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_loginOn(pxy, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_loginOn(const ::DSSDataService::DSSServiceCallBackPrx& pxy, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (bool)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_loginOn(pxy, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_loginOn(const ::DSSDataService::DSSServiceCallBackPrx& pxy, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_loginOn(pxy, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_loginOn(const ::DSSDataService::DSSServiceCallBackPrx& pxy, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (bool)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (bool)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::DSSDataService::DSSServicePrx __proxy = ::DSSDataService::DSSServicePrx::uncheckedCast(__result->getProxy());
                bool __ret;
                try
                {
                    __ret = __proxy->end_loginOn(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (bool)> _response;
        };
        return begin_loginOn(pxy, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_loginOn(const ::DSSDataService::DSSServiceCallBackPrx& pxy)
    {
        return begin_loginOn(pxy, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_loginOn(const ::DSSDataService::DSSServiceCallBackPrx& pxy, const ::Ice::Context& __ctx)
    {
        return begin_loginOn(pxy, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_loginOn(const ::DSSDataService::DSSServiceCallBackPrx& pxy, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_loginOn(pxy, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_loginOn(const ::DSSDataService::DSSServiceCallBackPrx& pxy, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_loginOn(pxy, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_loginOn(const ::DSSDataService::DSSServiceCallBackPrx& pxy, const ::DSSDataService::Callback_DSSService_loginOnPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_loginOn(pxy, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_loginOn(const ::DSSDataService::DSSServiceCallBackPrx& pxy, const ::Ice::Context& __ctx, const ::DSSDataService::Callback_DSSService_loginOnPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_loginOn(pxy, &__ctx, __del, __cookie);
    }

    bool end_loginOn(const ::Ice::AsyncResultPtr&);
    
private:

    bool loginOn(const ::DSSDataService::DSSServiceCallBackPrx&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_loginOn(const ::DSSDataService::DSSServiceCallBackPrx&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    bool loginOff(const ::DSSDataService::DSSServiceCallBackPrx& pxy)
    {
        return loginOff(pxy, 0);
    }
    bool loginOff(const ::DSSDataService::DSSServiceCallBackPrx& pxy, const ::Ice::Context& __ctx)
    {
        return loginOff(pxy, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_loginOff(const ::DSSDataService::DSSServiceCallBackPrx& pxy, const ::IceInternal::Function<void (bool)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_loginOff(pxy, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_loginOff(const ::DSSDataService::DSSServiceCallBackPrx& pxy, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_loginOff(pxy, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_loginOff(const ::DSSDataService::DSSServiceCallBackPrx& pxy, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (bool)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_loginOff(pxy, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_loginOff(const ::DSSDataService::DSSServiceCallBackPrx& pxy, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_loginOff(pxy, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_loginOff(const ::DSSDataService::DSSServiceCallBackPrx& pxy, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (bool)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (bool)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::DSSDataService::DSSServicePrx __proxy = ::DSSDataService::DSSServicePrx::uncheckedCast(__result->getProxy());
                bool __ret;
                try
                {
                    __ret = __proxy->end_loginOff(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (bool)> _response;
        };
        return begin_loginOff(pxy, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_loginOff(const ::DSSDataService::DSSServiceCallBackPrx& pxy)
    {
        return begin_loginOff(pxy, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_loginOff(const ::DSSDataService::DSSServiceCallBackPrx& pxy, const ::Ice::Context& __ctx)
    {
        return begin_loginOff(pxy, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_loginOff(const ::DSSDataService::DSSServiceCallBackPrx& pxy, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_loginOff(pxy, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_loginOff(const ::DSSDataService::DSSServiceCallBackPrx& pxy, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_loginOff(pxy, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_loginOff(const ::DSSDataService::DSSServiceCallBackPrx& pxy, const ::DSSDataService::Callback_DSSService_loginOffPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_loginOff(pxy, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_loginOff(const ::DSSDataService::DSSServiceCallBackPrx& pxy, const ::Ice::Context& __ctx, const ::DSSDataService::Callback_DSSService_loginOffPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_loginOff(pxy, &__ctx, __del, __cookie);
    }

    bool end_loginOff(const ::Ice::AsyncResultPtr&);
    
private:

    bool loginOff(const ::DSSDataService::DSSServiceCallBackPrx&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_loginOff(const ::DSSDataService::DSSServiceCallBackPrx&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    bool requestData(const ::Ice::Identity& id, const ::DSSDataService::TaskRequestPtr& request)
    {
        return requestData(id, request, 0);
    }
    bool requestData(const ::Ice::Identity& id, const ::DSSDataService::TaskRequestPtr& request, const ::Ice::Context& __ctx)
    {
        return requestData(id, request, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_requestData(const ::Ice::Identity& id, const ::DSSDataService::TaskRequestPtr& request, const ::IceInternal::Function<void (bool)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_requestData(id, request, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_requestData(const ::Ice::Identity& id, const ::DSSDataService::TaskRequestPtr& request, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_requestData(id, request, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_requestData(const ::Ice::Identity& id, const ::DSSDataService::TaskRequestPtr& request, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (bool)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_requestData(id, request, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_requestData(const ::Ice::Identity& id, const ::DSSDataService::TaskRequestPtr& request, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_requestData(id, request, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_requestData(const ::Ice::Identity& id, const ::DSSDataService::TaskRequestPtr& request, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (bool)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (bool)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::DSSDataService::DSSServicePrx __proxy = ::DSSDataService::DSSServicePrx::uncheckedCast(__result->getProxy());
                bool __ret;
                try
                {
                    __ret = __proxy->end_requestData(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (bool)> _response;
        };
        return begin_requestData(id, request, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_requestData(const ::Ice::Identity& id, const ::DSSDataService::TaskRequestPtr& request)
    {
        return begin_requestData(id, request, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_requestData(const ::Ice::Identity& id, const ::DSSDataService::TaskRequestPtr& request, const ::Ice::Context& __ctx)
    {
        return begin_requestData(id, request, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_requestData(const ::Ice::Identity& id, const ::DSSDataService::TaskRequestPtr& request, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_requestData(id, request, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_requestData(const ::Ice::Identity& id, const ::DSSDataService::TaskRequestPtr& request, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_requestData(id, request, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_requestData(const ::Ice::Identity& id, const ::DSSDataService::TaskRequestPtr& request, const ::DSSDataService::Callback_DSSService_requestDataPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_requestData(id, request, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_requestData(const ::Ice::Identity& id, const ::DSSDataService::TaskRequestPtr& request, const ::Ice::Context& __ctx, const ::DSSDataService::Callback_DSSService_requestDataPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_requestData(id, request, &__ctx, __del, __cookie);
    }

    bool end_requestData(const ::Ice::AsyncResultPtr&);
    
private:

    bool requestData(const ::Ice::Identity&, const ::DSSDataService::TaskRequestPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_requestData(const ::Ice::Identity&, const ::DSSDataService::TaskRequestPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    
    ::IceInternal::ProxyHandle<DSSService> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<DSSService*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<DSSService> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<DSSService*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<DSSService> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<DSSService*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<DSSService> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<DSSService*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<DSSService> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<DSSService*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<DSSService> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<DSSService*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<DSSService> ice_secure(bool __secure) const
    {
        return dynamic_cast<DSSService*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<DSSService> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<DSSService*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<DSSService> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<DSSService*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<DSSService> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<DSSService*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<DSSService> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<DSSService*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<DSSService> ice_twoway() const
    {
        return dynamic_cast<DSSService*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<DSSService> ice_oneway() const
    {
        return dynamic_cast<DSSService*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<DSSService> ice_batchOneway() const
    {
        return dynamic_cast<DSSService*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<DSSService> ice_datagram() const
    {
        return dynamic_cast<DSSService*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<DSSService> ice_batchDatagram() const
    {
        return dynamic_cast<DSSService*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<DSSService> ice_compress(bool __compress) const
    {
        return dynamic_cast<DSSService*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<DSSService> ice_timeout(int __timeout) const
    {
        return dynamic_cast<DSSService*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<DSSService> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<DSSService*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<DSSService> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<DSSService*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    static const ::std::string& ice_staticId();

private: 

    virtual ::IceInternal::Handle< ::IceDelegateM::Ice::Object> __createDelegateM();
    virtual ::IceInternal::Handle< ::IceDelegateD::Ice::Object> __createDelegateD();
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

}

}

namespace IceDelegate
{

namespace DSSDataService
{

class DSSServiceCallBack : virtual public ::IceDelegate::Ice::Object
{
public:

    virtual ::std::string getName(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void setReuestResult(const ::DSSDataService::TaskResultDataPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;
};

class DSSService : virtual public ::IceDelegate::Ice::Object
{
public:

    virtual bool loginOn(const ::DSSDataService::DSSServiceCallBackPrx&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual bool loginOff(const ::DSSDataService::DSSServiceCallBackPrx&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual bool requestData(const ::Ice::Identity&, const ::DSSDataService::TaskRequestPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;
};

}

}

namespace IceDelegateM
{

namespace DSSDataService
{

class DSSServiceCallBack : virtual public ::IceDelegate::DSSDataService::DSSServiceCallBack,
                           virtual public ::IceDelegateM::Ice::Object
{
public:

    virtual ::std::string getName(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void setReuestResult(const ::DSSDataService::TaskResultDataPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);
};

class DSSService : virtual public ::IceDelegate::DSSDataService::DSSService,
                   virtual public ::IceDelegateM::Ice::Object
{
public:

    virtual bool loginOn(const ::DSSDataService::DSSServiceCallBackPrx&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual bool loginOff(const ::DSSDataService::DSSServiceCallBackPrx&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual bool requestData(const ::Ice::Identity&, const ::DSSDataService::TaskRequestPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);
};

}

}

namespace IceDelegateD
{

namespace DSSDataService
{

class DSSServiceCallBack : virtual public ::IceDelegate::DSSDataService::DSSServiceCallBack,
                           virtual public ::IceDelegateD::Ice::Object
{
public:

    virtual ::std::string getName(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void setReuestResult(const ::DSSDataService::TaskResultDataPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);
};

class DSSService : virtual public ::IceDelegate::DSSDataService::DSSService,
                   virtual public ::IceDelegateD::Ice::Object
{
public:

    virtual bool loginOn(const ::DSSDataService::DSSServiceCallBackPrx&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual bool loginOff(const ::DSSDataService::DSSServiceCallBackPrx&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual bool requestData(const ::Ice::Identity&, const ::DSSDataService::TaskRequestPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);
};

}

}

namespace DSSDataService
{

class DSSServiceCallBack : virtual public ::Ice::Object
{
public:

    typedef DSSServiceCallBackPrx ProxyType;
    typedef DSSServiceCallBackPtr PointerType;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();

    virtual ::std::string getName(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getName(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void setReuestResult(const ::DSSDataService::TaskResultDataPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___setReuestResult(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::DispatchStatus __dispatch(::IceInternal::Incoming&, const ::Ice::Current&);

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    #ifdef __SUNPRO_CC
    using ::Ice::Object::__writeImpl;
    using ::Ice::Object::__readImpl;
    #endif
};

inline bool operator==(const DSSServiceCallBack& l, const DSSServiceCallBack& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const DSSServiceCallBack& l, const DSSServiceCallBack& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

class DSSService : virtual public ::Ice::Object
{
public:

    typedef DSSServicePrx ProxyType;
    typedef DSSServicePtr PointerType;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();

    virtual bool loginOn(const ::DSSDataService::DSSServiceCallBackPrx&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___loginOn(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual bool loginOff(const ::DSSDataService::DSSServiceCallBackPrx&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___loginOff(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual bool requestData(const ::Ice::Identity&, const ::DSSDataService::TaskRequestPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___requestData(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::DispatchStatus __dispatch(::IceInternal::Incoming&, const ::Ice::Current&);

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    #ifdef __SUNPRO_CC
    using ::Ice::Object::__writeImpl;
    using ::Ice::Object::__readImpl;
    #endif
};

inline bool operator==(const DSSService& l, const DSSService& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const DSSService& l, const DSSService& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

}

namespace DSSDataService
{

template<class T>
class CallbackNC_DSSServiceCallBack_getName : public Callback_DSSServiceCallBack_getName_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::std::string&);

    CallbackNC_DSSServiceCallBack_getName(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::DSSDataService::DSSServiceCallBackPrx __proxy = ::DSSDataService::DSSServiceCallBackPrx::uncheckedCast(__result->getProxy());
        ::std::string __ret;
        try
        {
            __ret = __proxy->end_getName(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_DSSServiceCallBack_getNamePtr
newCallback_DSSServiceCallBack_getName(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::std::string&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_DSSServiceCallBack_getName<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_DSSServiceCallBack_getNamePtr
newCallback_DSSServiceCallBack_getName(T* instance, void (T::*cb)(const ::std::string&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_DSSServiceCallBack_getName<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_DSSServiceCallBack_getName : public Callback_DSSServiceCallBack_getName_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::std::string&, const CT&);

    Callback_DSSServiceCallBack_getName(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::DSSDataService::DSSServiceCallBackPrx __proxy = ::DSSDataService::DSSServiceCallBackPrx::uncheckedCast(__result->getProxy());
        ::std::string __ret;
        try
        {
            __ret = __proxy->end_getName(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_DSSServiceCallBack_getNamePtr
newCallback_DSSServiceCallBack_getName(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::std::string&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_DSSServiceCallBack_getName<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_DSSServiceCallBack_getNamePtr
newCallback_DSSServiceCallBack_getName(T* instance, void (T::*cb)(const ::std::string&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_DSSServiceCallBack_getName<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_DSSServiceCallBack_setReuestResult : public Callback_DSSServiceCallBack_setReuestResult_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_DSSServiceCallBack_setReuestResult(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_DSSServiceCallBack_setReuestResultPtr
newCallback_DSSServiceCallBack_setReuestResult(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_DSSServiceCallBack_setReuestResult<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_DSSServiceCallBack_setReuestResultPtr
newCallback_DSSServiceCallBack_setReuestResult(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_DSSServiceCallBack_setReuestResult<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_DSSServiceCallBack_setReuestResultPtr
newCallback_DSSServiceCallBack_setReuestResult(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_DSSServiceCallBack_setReuestResult<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_DSSServiceCallBack_setReuestResultPtr
newCallback_DSSServiceCallBack_setReuestResult(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_DSSServiceCallBack_setReuestResult<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_DSSServiceCallBack_setReuestResult : public Callback_DSSServiceCallBack_setReuestResult_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_DSSServiceCallBack_setReuestResult(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_DSSServiceCallBack_setReuestResultPtr
newCallback_DSSServiceCallBack_setReuestResult(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_DSSServiceCallBack_setReuestResult<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_DSSServiceCallBack_setReuestResultPtr
newCallback_DSSServiceCallBack_setReuestResult(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_DSSServiceCallBack_setReuestResult<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_DSSServiceCallBack_setReuestResultPtr
newCallback_DSSServiceCallBack_setReuestResult(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_DSSServiceCallBack_setReuestResult<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_DSSServiceCallBack_setReuestResultPtr
newCallback_DSSServiceCallBack_setReuestResult(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_DSSServiceCallBack_setReuestResult<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_DSSService_loginOn : public Callback_DSSService_loginOn_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(bool);

    CallbackNC_DSSService_loginOn(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::DSSDataService::DSSServicePrx __proxy = ::DSSDataService::DSSServicePrx::uncheckedCast(__result->getProxy());
        bool __ret;
        try
        {
            __ret = __proxy->end_loginOn(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_DSSService_loginOnPtr
newCallback_DSSService_loginOn(const IceUtil::Handle<T>& instance, void (T::*cb)(bool), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_DSSService_loginOn<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_DSSService_loginOnPtr
newCallback_DSSService_loginOn(T* instance, void (T::*cb)(bool), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_DSSService_loginOn<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_DSSService_loginOn : public Callback_DSSService_loginOn_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(bool, const CT&);

    Callback_DSSService_loginOn(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::DSSDataService::DSSServicePrx __proxy = ::DSSDataService::DSSServicePrx::uncheckedCast(__result->getProxy());
        bool __ret;
        try
        {
            __ret = __proxy->end_loginOn(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_DSSService_loginOnPtr
newCallback_DSSService_loginOn(const IceUtil::Handle<T>& instance, void (T::*cb)(bool, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_DSSService_loginOn<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_DSSService_loginOnPtr
newCallback_DSSService_loginOn(T* instance, void (T::*cb)(bool, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_DSSService_loginOn<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_DSSService_loginOff : public Callback_DSSService_loginOff_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(bool);

    CallbackNC_DSSService_loginOff(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::DSSDataService::DSSServicePrx __proxy = ::DSSDataService::DSSServicePrx::uncheckedCast(__result->getProxy());
        bool __ret;
        try
        {
            __ret = __proxy->end_loginOff(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_DSSService_loginOffPtr
newCallback_DSSService_loginOff(const IceUtil::Handle<T>& instance, void (T::*cb)(bool), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_DSSService_loginOff<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_DSSService_loginOffPtr
newCallback_DSSService_loginOff(T* instance, void (T::*cb)(bool), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_DSSService_loginOff<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_DSSService_loginOff : public Callback_DSSService_loginOff_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(bool, const CT&);

    Callback_DSSService_loginOff(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::DSSDataService::DSSServicePrx __proxy = ::DSSDataService::DSSServicePrx::uncheckedCast(__result->getProxy());
        bool __ret;
        try
        {
            __ret = __proxy->end_loginOff(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_DSSService_loginOffPtr
newCallback_DSSService_loginOff(const IceUtil::Handle<T>& instance, void (T::*cb)(bool, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_DSSService_loginOff<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_DSSService_loginOffPtr
newCallback_DSSService_loginOff(T* instance, void (T::*cb)(bool, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_DSSService_loginOff<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_DSSService_requestData : public Callback_DSSService_requestData_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(bool);

    CallbackNC_DSSService_requestData(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::DSSDataService::DSSServicePrx __proxy = ::DSSDataService::DSSServicePrx::uncheckedCast(__result->getProxy());
        bool __ret;
        try
        {
            __ret = __proxy->end_requestData(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_DSSService_requestDataPtr
newCallback_DSSService_requestData(const IceUtil::Handle<T>& instance, void (T::*cb)(bool), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_DSSService_requestData<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_DSSService_requestDataPtr
newCallback_DSSService_requestData(T* instance, void (T::*cb)(bool), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_DSSService_requestData<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_DSSService_requestData : public Callback_DSSService_requestData_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(bool, const CT&);

    Callback_DSSService_requestData(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::DSSDataService::DSSServicePrx __proxy = ::DSSDataService::DSSServicePrx::uncheckedCast(__result->getProxy());
        bool __ret;
        try
        {
            __ret = __proxy->end_requestData(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_DSSService_requestDataPtr
newCallback_DSSService_requestData(const IceUtil::Handle<T>& instance, void (T::*cb)(bool, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_DSSService_requestData<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_DSSService_requestDataPtr
newCallback_DSSService_requestData(T* instance, void (T::*cb)(bool, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_DSSService_requestData<T, CT>(instance, cb, excb, sentcb);
}

}

#endif
