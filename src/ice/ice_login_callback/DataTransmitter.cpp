// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `DataTransmitter.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#include <DataTransmitter.h>
#include <Ice/LocalException.h>
#include <Ice/ObjectFactory.h>
#include <Ice/BasicStream.h>
#include <Ice/Object.h>
#include <IceUtil/Iterator.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 305
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 1
#       error Ice patch level mismatch!
#   endif
#endif

namespace
{

const ::std::string __DataTransmitter__DataProc__setReadySendDataInfo_name = "setReadySendDataInfo";

const ::std::string __DataTransmitter__DataProc__sendData_name = "sendData";

const ::std::string __DataTransmitter__DataProc__checkTaskDataInfo_name = "checkTaskDataInfo";

}

namespace
{

const char* __DataTransmitter__RequestCanceledException_name = "DataTransmitter::RequestCanceledException";

struct __F__DataTransmitter__RequestCanceledException : public ::IceInternal::UserExceptionFactory
{
    virtual void
    createAndThrow(const ::std::string&)
    {
        throw ::DataTransmitter::RequestCanceledException();
    }
};

class __F__DataTransmitter__RequestCanceledException__Init
{
public:

    __F__DataTransmitter__RequestCanceledException__Init()
    {
        ::IceInternal::factoryTable->addExceptionFactory("::DataTransmitter::RequestCanceledException", new __F__DataTransmitter__RequestCanceledException);
    }

    ~__F__DataTransmitter__RequestCanceledException__Init()
    {
        ::IceInternal::factoryTable->removeExceptionFactory("::DataTransmitter::RequestCanceledException");
    }
};

const __F__DataTransmitter__RequestCanceledException__Init __F__DataTransmitter__RequestCanceledException__i;

}

DataTransmitter::RequestCanceledException::~RequestCanceledException() throw()
{
}

::std::string
DataTransmitter::RequestCanceledException::ice_name() const
{
    return __DataTransmitter__RequestCanceledException_name;
}

DataTransmitter::RequestCanceledException*
DataTransmitter::RequestCanceledException::ice_clone() const
{
    return new RequestCanceledException(*this);
}

void
DataTransmitter::RequestCanceledException::ice_throw() const
{
    throw *this;
}

void
DataTransmitter::RequestCanceledException::__writeImpl(::IceInternal::BasicStream* __os) const
{
    __os->startWriteSlice("::DataTransmitter::RequestCanceledException", -1, true);
    __os->endWriteSlice();
}

void
DataTransmitter::RequestCanceledException::__readImpl(::IceInternal::BasicStream* __is)
{
    __is->startReadSlice();
    __is->endReadSlice();
}

namespace Ice
{
}
::IceProxy::Ice::Object* ::IceProxy::DataTransmitter::upCast(::IceProxy::DataTransmitter::DataProc* p) { return p; }

void
::IceProxy::DataTransmitter::__read(::IceInternal::BasicStream* __is, ::IceInternal::ProxyHandle< ::IceProxy::DataTransmitter::DataProc>& v)
{
    ::Ice::ObjectPrx proxy;
    __is->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new ::IceProxy::DataTransmitter::DataProc;
        v->__copyFrom(proxy);
    }
}

void
IceProxy::DataTransmitter::DataProc::setReadySendDataInfo(const ::DataTransmitter::SendDataInfo& dataInfo, const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __DataTransmitter__DataProc__setReadySendDataInfo_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __delBase = __getDelegate(false);
            ::IceDelegate::DataTransmitter::DataProc* __del = dynamic_cast< ::IceDelegate::DataTransmitter::DataProc*>(__delBase.get());
            __del->setReadySendDataInfo(dataInfo, __ctx, __observer);
            return;
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapperRelaxed(__delBase, __ex, true, __cnt, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::DataTransmitter::DataProc::begin_setReadySendDataInfo(const ::DataTransmitter::SendDataInfo& dataInfo, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __DataTransmitter__DataProc__setReadySendDataInfo_name, __del, __cookie);
    try
    {
        __result->__prepare(__DataTransmitter__DataProc__setReadySendDataInfo_name, ::Ice::Idempotent, __ctx);
        ::IceInternal::BasicStream* __os = __result->__startWriteParams(::Ice::DefaultFormat);
        __os->write(dataInfo);
        __result->__endWriteParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

void
IceProxy::DataTransmitter::DataProc::end_setReadySendDataInfo(const ::Ice::AsyncResultPtr& __result)
{
    __end(__result, __DataTransmitter__DataProc__setReadySendDataInfo_name);
}

void
IceProxy::DataTransmitter::DataProc::sendData(const ::DataTransmitter::SendDataPackagePtr& dataPackage, const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __DataTransmitter__DataProc__sendData_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __delBase = __getDelegate(false);
            ::IceDelegate::DataTransmitter::DataProc* __del = dynamic_cast< ::IceDelegate::DataTransmitter::DataProc*>(__delBase.get());
            __del->sendData(dataPackage, __ctx, __observer);
            return;
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapperRelaxed(__delBase, __ex, true, __cnt, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::DataTransmitter::DataProc::begin_sendData(const ::DataTransmitter::SendDataPackagePtr& dataPackage, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __DataTransmitter__DataProc__sendData_name, __del, __cookie);
    try
    {
        __result->__prepare(__DataTransmitter__DataProc__sendData_name, ::Ice::Idempotent, __ctx);
        ::IceInternal::BasicStream* __os = __result->__startWriteParams(::Ice::DefaultFormat);
        __os->write(dataPackage);
        __result->__endWriteParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

void
IceProxy::DataTransmitter::DataProc::end_sendData(const ::Ice::AsyncResultPtr& __result)
{
    __end(__result, __DataTransmitter__DataProc__sendData_name);
}

bool
IceProxy::DataTransmitter::DataProc::checkTaskDataInfo(const ::DataTransmitter::CheckDataInfo& checkInfo, const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __DataTransmitter__DataProc__checkTaskDataInfo_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__DataTransmitter__DataProc__checkTaskDataInfo_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::DataTransmitter::DataProc* __del = dynamic_cast< ::IceDelegate::DataTransmitter::DataProc*>(__delBase.get());
            return __del->checkTaskDataInfo(checkInfo, __ctx, __observer);
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapperRelaxed(__delBase, __ex, true, __cnt, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::DataTransmitter::DataProc::begin_checkTaskDataInfo(const ::DataTransmitter::CheckDataInfo& checkInfo, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__DataTransmitter__DataProc__checkTaskDataInfo_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __DataTransmitter__DataProc__checkTaskDataInfo_name, __del, __cookie);
    try
    {
        __result->__prepare(__DataTransmitter__DataProc__checkTaskDataInfo_name, ::Ice::Idempotent, __ctx);
        ::IceInternal::BasicStream* __os = __result->__startWriteParams(::Ice::DefaultFormat);
        __os->write(checkInfo);
        __result->__endWriteParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

bool
IceProxy::DataTransmitter::DataProc::end_checkTaskDataInfo(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __DataTransmitter__DataProc__checkTaskDataInfo_name);
    bool __ret;
    bool __ok = __result->__wait();
    try
    {
        if(!__ok)
        {
            try
            {
                __result->__throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
            }
        }
        ::IceInternal::BasicStream* __is = __result->__startReadParams();
        __is->read(__ret);
        __result->__endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& ex)
    {
        __result->__getObserver().failed(ex.ice_name());
        throw;
    }
}

const ::std::string&
IceProxy::DataTransmitter::DataProc::ice_staticId()
{
    return ::DataTransmitter::DataProc::ice_staticId();
}

::IceInternal::Handle< ::IceDelegateM::Ice::Object>
IceProxy::DataTransmitter::DataProc::__createDelegateM()
{
    return ::IceInternal::Handle< ::IceDelegateM::Ice::Object>(new ::IceDelegateM::DataTransmitter::DataProc);
}

::IceInternal::Handle< ::IceDelegateD::Ice::Object>
IceProxy::DataTransmitter::DataProc::__createDelegateD()
{
    return ::IceInternal::Handle< ::IceDelegateD::Ice::Object>(new ::IceDelegateD::DataTransmitter::DataProc);
}

::IceProxy::Ice::Object*
IceProxy::DataTransmitter::DataProc::__newInstance() const
{
    return new DataProc;
}

void
IceDelegateM::DataTransmitter::DataProc::setReadySendDataInfo(const ::DataTransmitter::SendDataInfo& dataInfo, const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __DataTransmitter__DataProc__setReadySendDataInfo_name, ::Ice::Idempotent, __context, __observer);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(dataInfo);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    if(__og.hasResponse())
    {
        try
        {
            if(!__ok)
            {
                try
                {
                    __og.throwUserException();
                }
                catch(const ::Ice::UserException& __ex)
                {
                    ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                    throw __uue;
                }
            }
            __og.readEmptyParams();
        }
        catch(const ::Ice::LocalException& __ex)
        {
            throw ::IceInternal::LocalExceptionWrapper(__ex, false);
        }
    }
}

void
IceDelegateM::DataTransmitter::DataProc::sendData(const ::DataTransmitter::SendDataPackagePtr& dataPackage, const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __DataTransmitter__DataProc__sendData_name, ::Ice::Idempotent, __context, __observer);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(dataPackage);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    if(__og.hasResponse())
    {
        try
        {
            if(!__ok)
            {
                try
                {
                    __og.throwUserException();
                }
                catch(const ::Ice::UserException& __ex)
                {
                    ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                    throw __uue;
                }
            }
            __og.readEmptyParams();
        }
        catch(const ::Ice::LocalException& __ex)
        {
            throw ::IceInternal::LocalExceptionWrapper(__ex, false);
        }
    }
}

bool
IceDelegateM::DataTransmitter::DataProc::checkTaskDataInfo(const ::DataTransmitter::CheckDataInfo& checkInfo, const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __DataTransmitter__DataProc__checkTaskDataInfo_name, ::Ice::Idempotent, __context, __observer);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(checkInfo);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    bool __ret;
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.startReadParams();
        __is->read(__ret);
        __og.endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

void
IceDelegateD::DataTransmitter::DataProc::setReadySendDataInfo(const ::DataTransmitter::SendDataInfo& dataInfo, const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(const ::DataTransmitter::SendDataInfo& __p_dataInfo, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _m_dataInfo(__p_dataInfo)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::DataTransmitter::DataProc* servant = dynamic_cast< ::DataTransmitter::DataProc*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            servant->setReadySendDataInfo(_m_dataInfo, _current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
        const ::DataTransmitter::SendDataInfo& _m_dataInfo;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __DataTransmitter__DataProc__setReadySendDataInfo_name, ::Ice::Idempotent, __context);
    try
    {
        _DirectI __direct(dataInfo, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
}

void
IceDelegateD::DataTransmitter::DataProc::sendData(const ::DataTransmitter::SendDataPackagePtr& dataPackage, const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(const ::DataTransmitter::SendDataPackagePtr& __p_dataPackage, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _m_dataPackage(__p_dataPackage)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::DataTransmitter::DataProc* servant = dynamic_cast< ::DataTransmitter::DataProc*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            servant->sendData(_m_dataPackage, _current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
        const ::DataTransmitter::SendDataPackagePtr& _m_dataPackage;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __DataTransmitter__DataProc__sendData_name, ::Ice::Idempotent, __context);
    try
    {
        _DirectI __direct(dataPackage, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
}

bool
IceDelegateD::DataTransmitter::DataProc::checkTaskDataInfo(const ::DataTransmitter::CheckDataInfo& checkInfo, const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(bool& __result, const ::DataTransmitter::CheckDataInfo& __p_checkInfo, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _result(__result),
            _m_checkInfo(__p_checkInfo)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::DataTransmitter::DataProc* servant = dynamic_cast< ::DataTransmitter::DataProc*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            _result = servant->checkTaskDataInfo(_m_checkInfo, _current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
        bool& _result;
        const ::DataTransmitter::CheckDataInfo& _m_checkInfo;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __DataTransmitter__DataProc__checkTaskDataInfo_name, ::Ice::Idempotent, __context);
    bool __result;
    try
    {
        _DirectI __direct(__result, checkInfo, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
    return __result;
}

::Ice::Object* DataTransmitter::upCast(::DataTransmitter::DataProc* p) { return p; }

namespace
{
const ::std::string __DataTransmitter__DataProc_ids[2] =
{
    "::DataTransmitter::DataProc",
    "::Ice::Object"
};

}

bool
DataTransmitter::DataProc::ice_isA(const ::std::string& _s, const ::Ice::Current&) const
{
    return ::std::binary_search(__DataTransmitter__DataProc_ids, __DataTransmitter__DataProc_ids + 2, _s);
}

::std::vector< ::std::string>
DataTransmitter::DataProc::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&__DataTransmitter__DataProc_ids[0], &__DataTransmitter__DataProc_ids[2]);
}

const ::std::string&
DataTransmitter::DataProc::ice_id(const ::Ice::Current&) const
{
    return __DataTransmitter__DataProc_ids[0];
}

const ::std::string&
DataTransmitter::DataProc::ice_staticId()
{
    return __DataTransmitter__DataProc_ids[0];
}

::Ice::DispatchStatus
DataTransmitter::DataProc::___setReadySendDataInfo(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Idempotent, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::DataTransmitter::SendDataInfo dataInfo;
    __is->read(dataInfo);
    __inS.endReadParams();
    setReadySendDataInfo(dataInfo, __current);
    __inS.__writeEmptyParams();
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
DataTransmitter::DataProc::___sendData(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Idempotent, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::DataTransmitter::SendDataPackagePtr dataPackage;
    __is->read(dataPackage);
    __inS.endReadParams();
    sendData(dataPackage, __current);
    __inS.__writeEmptyParams();
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
DataTransmitter::DataProc::___checkTaskDataInfo(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Idempotent, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::DataTransmitter::CheckDataInfo checkInfo;
    __is->read(checkInfo);
    __inS.endReadParams();
    bool __ret = checkTaskDataInfo(checkInfo, __current);
    ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
    __os->write(__ret);
    __inS.__endWriteParams(true);
    return ::Ice::DispatchOK;
}

namespace
{
const ::std::string __DataTransmitter__DataProc_all[] =
{
    "checkTaskDataInfo",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "sendData",
    "setReadySendDataInfo"
};

}

::Ice::DispatchStatus
DataTransmitter::DataProc::__dispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair< const ::std::string*, const ::std::string*> r = ::std::equal_range(__DataTransmitter__DataProc_all, __DataTransmitter__DataProc_all + 7, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - __DataTransmitter__DataProc_all)
    {
        case 0:
        {
            return ___checkTaskDataInfo(in, current);
        }
        case 1:
        {
            return ___ice_id(in, current);
        }
        case 2:
        {
            return ___ice_ids(in, current);
        }
        case 3:
        {
            return ___ice_isA(in, current);
        }
        case 4:
        {
            return ___ice_ping(in, current);
        }
        case 5:
        {
            return ___sendData(in, current);
        }
        case 6:
        {
            return ___setReadySendDataInfo(in, current);
        }
    }

    assert(false);
    throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
}

void
DataTransmitter::DataProc::__writeImpl(::IceInternal::BasicStream* __os) const
{
    __os->startWriteSlice(ice_staticId(), -1, true);
    __os->endWriteSlice();
}

void
DataTransmitter::DataProc::__readImpl(::IceInternal::BasicStream* __is)
{
    __is->startReadSlice();
    __is->endReadSlice();
}

void 
DataTransmitter::__patch(DataProcPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = ::DataTransmitter::DataProcPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(::DataTransmitter::DataProc::ice_staticId(), v);
    }
}
