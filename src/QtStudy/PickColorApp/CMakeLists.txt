SET(APPLICATION_NAME PickColorApp)

SET(APPLICATION_DESCRIPTION_SUMMARY  "测试启动程序")
MESSAGE("**********************Setting up ${APPLICATION_NAME}********************")

# 定义项目版本
SET(CPACK_PACKAGE_VERSION_MAJOR 1)
SET(CPACK_PACKAGE_VERSION_MINOR 1)
SET(CPACK_PACKAGE_VERSION_PATCH 2)

SET(APPLICATION_VERSION  ${CPACK_PACKAGE_VERSION_MAJOR}.${CPACK_PACKAGE_VERSION_MINOR}.${CPACK_PACKAGE_VERSION_PATCH})
SET(RELEASE_NAME APPLICATION_DESCRIPTION_SUMMARY)
# Note the version no is Mmmpp for Major/minor/patch, 0-padded, thus '10100' for 1.1.0
SET(APPLICATION_VERSION_INT 10000)
MESSAGE("Application version:" ${APPLICATION_VERSION})

SET(CMAKE_SHARED_LINKER_FLAGS "${CMAKE_SHARED_LINKER_FLAGS} /NODEFAULTLIB:LIBCMTD")

ADD_DEFINITIONS(-DCONSOLE)
 
set(CMAKE_AUTOMOC ON)
set(CMAKE_INCLUDE_CURRENT_DIR ON) 
 
# 设置QT UI文件
FILE(GLOB QT_UIS "*.ui")
FILE(GLOB LIB_QT_RCS "*.qrc")

IF(Qt5Widgets_FOUND)
    QT5_ADD_RESOURCES( LIB_RC_SRCS ${LIB_QT_RCS} )
    QT5_WRAP_UI( UI_HDRS ${QT_UIS} )
    IF(Qt5Widgets_VERSION VERSION_LESS 5.2.0)
		QT5_WRAP_CPP( MOC_UI_SRCS ${UI_HDRS} OPTIONS "-f" )
    ELSE()
		QT5_WRAP_CPP( MOC_UI_SRCS ${UI_HDRS})
    ENDIF()
ELSE()
    INCLUDE( ${QT_USE_FILE} )
    QT4_ADD_RESOURCES( LIB_RC_SRCS ${LIB_QT_RCS} )
    QT4_WRAP_UI( UI_HDRS ${QT_UIS} )
    QT4_WRAP_CPP( UI_SRCS ${UI_HDRS} )
	QT4_WRAP_CPP( MOC_UI_SRCS ${UI_HDRS} OPTIONS "-f" )
ENDIF()

# 设置头文件
FILE(GLOB ${APPLICATION_NAME}_SRCS "*.cpp" )
FILE(GLOB ${APPLICATION_NAME}_HEADERS "./*.h")

INCLUDE_DIRECTORIES(
	${CMAKE_CURRENT_BINARY_DIR}
	${UI_HDRS}
	${DEFAULT_INCLUDE_SUBDIR}
	
)
INCLUDE_DIRECTORIES(${PROJECT_SRC_DIR}/library_src/color_picker)
#打包相关文件成可执行文件
ADD_EXECUTABLE(${APPLICATION_NAME} 
   ${${APPLICATION_NAME}_HEADERS}
   ${${APPLICATION_NAME}_SRCS}
   ${MOC_UI_SRCS}
   ${LIB_RC_SRCS}
  
)

#设置Link依赖包
TARGET_LINK_LIBRARIES(${APPLICATION_NAME}
	${XMLFOUNDATION_LIBRARIES}
	QtColorPickerLib
)

LINK_WITH_VARIABLES(${APPLICATION_NAME} 

)

IF ( Qt5Widgets_FOUND )
    qt5_use_modules( ${APPLICATION_NAME} Gui Widgets OpenGL Xml Svg Test Quick Concurrent)
ELSE()   
TARGET_LINK_LIBRARIES(${APPLICATION_NAME}
${QT_LIBRARIES} 
	${QT_QTOPENGL_LIBRARY} 
	${QT_QTCORE_LIBRARY} 
	${QT_QTGUI_LIBRARY} 
	${QT_QTSVG_LIBRARY}
	${QT_QTTEST_LIBRARY}
	${QT_QTXML_LIBRARY}
)
ENDIF( Qt5Widgets_FOUND )

#configure_file(app.config ${PROJECT_SOURCE_DIR}/bin/Debug @ONLY) 
#configure_file(app.config ${PROJECT_SOURCE_DIR}/bin/Release @ONLY) 

# 设置工程的属性
SET (TARGET_OUTPUT_NAME ${APPLICATION_NAME} )
SET_TARGET_PROPERTIES( ${APPLICATION_NAME} PROPERTIES OUTPUT_NAME ${TARGET_OUTPUT_NAME} )
SET_TARGET_PROPERTIES(${APPLICATION_NAME} PROPERTIES DEBUG_OUTPUT_NAME "${TARGET_OUTPUT_NAME}${CMAKE_DEBUG_POSTFIX}")
SET_TARGET_PROPERTIES(${APPLICATION_NAME} PROPERTIES RELEASE_OUTPUT_NAME "${TARGET_OUTPUT_NAME}${CMAKE_RELEASE_POSTFIX}")

# 设置与QT designer 集成
SET_TARGET_PROPERTIES(${APPLICATION_NAME} PROPERTIES VS_KEYWORD "Qt4VSv1.0")


 
# 设置项目标签.
SET_TARGET_PROPERTIES(${APPLICATION_NAME} PROPERTIES PROJECT_LABEL "App ${APPLICATION_NAME}")
SET_TARGET_PROPERTIES(${APPLICATION_NAME} PROPERTIES FOLDER "App") 
 
# QT 临时产生文件分组
SOURCE_GROUP(
    "Generated Files"
    FILES 
		${MOC_UI_SRCS}
)

# QT UI文件分组
SOURCE_GROUP(
    "Form Files"
    FILES  
	${QT_UIS}
	${LIB_RC_SRCS}
	${LIB_QT_RCS}
)

SOURCE_GROUP(
    "_Study_QtGui"
    FILES 
		${QtGUI_STUDY_HEADER}
		${QtGUI_STUDY_SRCS}
)

SOURCE_GROUP(
    "_Study_QML"
    FILES 
		${QML_STUDY_HEADER}
		${QML_STUDY_SRCS}
)

SOURCE_GROUP(
    "_Study_QtCore"
    FILES 
	${QtCore_STUDY_HEADER}
   ${QtCore_STUDY_SRCS}
)

SOURCE_GROUP(
    "_Study_Boost"
    FILES 
	${Boost_STUDY_HEADER}
	${Boost_STUDY_SRCS}
)

SOURCE_GROUP(
    "_OtherTest_EMDataShow"
    FILES 
		${OtherTest_EMDataShow_HEADER}
		${OtherTest_EMDataShow_SRCS}
)

SOURCE_GROUP(
    "TinyXML"
    FILES 
		${TinyXML_SRCS}
)

#输出到上级目录，取消debug, release 目录
IF (MSVC_IDE) 
	SET_TARGET_PROPERTIES( ${APPLICATION_NAME} PROPERTIES RUNTIME_OUTPUT_DIRECTORY  ${PROJECT_SOURCE_DIR}/bin )
	SET_TARGET_PROPERTIES( ${APPLICATION_NAME} PROPERTIES RUNTIME_OUTPUT_DIRECTORY_DEBUG ${PROJECT_SOURCE_DIR}/bin/Debug )
	SET_TARGET_PROPERTIES( ${APPLICATION_NAME} PROPERTIES RUNTIME_OUTPUT_DIRECTORY_RELEASE ${PROJECT_SOURCE_DIR}/bin/Release)
ENDIF() 
  



# debug 安装
INSTALL(
TARGETS ${APPLICATION_NAME}
RUNTIME DESTINATION bin/Debug
)
	

# release 安装
INSTALL(
TARGETS ${APPLICATION_NAME}
RUNTIME DESTINATION bin/release
)
	
INSTALL(CODE "MESSAGE(\"Installing App:${APPLICATION_NAME}..\")")





