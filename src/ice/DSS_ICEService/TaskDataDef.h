// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `TaskDataDef.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef __TaskDataDef_h__
#define __TaskDataDef_h__

#include <Ice/ProxyF.h>
#include <Ice/ObjectF.h>
#include <Ice/Exception.h>
#include <Ice/LocalObject.h>
#include <Ice/StreamHelpers.h>
#include <IceUtil/ScopedArray.h>
#include <IceUtil/Optional.h>
#include <Ice/Identity.h>
#include <Ice/UndefSysMacros.h>
#include <Ice/Identity.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 305
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 1
#       error Ice patch level mismatch!
#   endif
#endif

namespace TaskDataDef
{

enum emTaskType
{
    TaskTestDataRecv,
    TaskFileTransfer,
    TaskCaculate,
    TaskDataTrans,
    TaskOther
};

enum emRequestResultType
{
    RTNoError,
    RTAdditionalDataCRCFailed,
    RTInvalideClientID,
    RTCreateTaskFaild
};

typedef ::std::vector< ::Ice::Byte> ArrayData;

class TaskRequest : public IceUtil::Shared
{
public:
    
    TaskRequest() {}
    TaskRequest(::TaskDataDef::emTaskType __ice_TaskType, const ::std::string& __ice_strTaskID, const ::Ice::Identity& __ice_userID, const ::TaskDataDef::ArrayData& __ice_arrAddtionalData, ::Ice::Long __ice_nAddtionalDataCRC) :
        TaskType(__ice_TaskType),
        strTaskID(__ice_strTaskID),
        userID(__ice_userID),
        arrAddtionalData(__ice_arrAddtionalData),
        nAddtionalDataCRC(__ice_nAddtionalDataCRC)
    {
    }
    

    ::TaskDataDef::emTaskType TaskType;
    ::std::string strTaskID;
    ::Ice::Identity userID;
    ::TaskDataDef::ArrayData arrAddtionalData;
    ::Ice::Long nAddtionalDataCRC;
};

typedef ::IceUtil::Handle< ::TaskDataDef::TaskRequest> TaskRequestPtr;

class TaskRequestResult : public IceUtil::Shared
{
public:
    
    TaskRequestResult() {}
    TaskRequestResult(const ::TaskDataDef::TaskRequestPtr& __ice_objRequst, ::Ice::Int __ice_nResultCode, const ::std::string& __ice_strComment) :
        objRequst(__ice_objRequst),
        nResultCode(__ice_nResultCode),
        strComment(__ice_strComment)
    {
    }
    

    ::TaskDataDef::TaskRequestPtr objRequst;
    ::Ice::Int nResultCode;
    ::std::string strComment;
};

typedef ::IceUtil::Handle< ::TaskDataDef::TaskRequestResult> TaskRequestResultPtr;

class TaskResultData : public IceUtil::Shared
{
public:
    
    TaskResultData() {}
    TaskResultData(const ::TaskDataDef::TaskRequestResultPtr& __ice_objRequestAck, const ::TaskDataDef::ArrayData& __ice_arrPackageData, ::Ice::Int __ice_nPackageCRC) :
        objRequestAck(__ice_objRequestAck),
        arrPackageData(__ice_arrPackageData),
        nPackageCRC(__ice_nPackageCRC)
    {
    }
    

    ::TaskDataDef::TaskRequestResultPtr objRequestAck;
    ::TaskDataDef::ArrayData arrPackageData;
    ::Ice::Int nPackageCRC;
};

typedef ::IceUtil::Handle< ::TaskDataDef::TaskResultData> TaskResultDataPtr;

}

namespace Ice
{
template<>
struct StreamableTraits< ::TaskDataDef::emTaskType>
{
    static const StreamHelperCategory helper = StreamHelperCategoryEnum;
    static const int minValue = 0;
    static const int maxValue = 4;
    static const int minWireSize = 1;
    static const bool fixedLength = false;
};

template<>
struct StreamableTraits< ::TaskDataDef::emRequestResultType>
{
    static const StreamHelperCategory helper = StreamHelperCategoryEnum;
    static const int minValue = 0;
    static const int maxValue = 3;
    static const int minWireSize = 1;
    static const bool fixedLength = false;
};

template<>
struct StreamableTraits< ::TaskDataDef::TaskRequestPtr>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStructClass;
    static const int minWireSize = 13;
    static const bool fixedLength = false;
};

template<class S>
struct StreamWriter< ::TaskDataDef::TaskRequestPtr, S>
{
    static void write(S* __os, const ::TaskDataDef::TaskRequestPtr& v)
    {
        __os->write(v->TaskType);
        __os->write(v->strTaskID);
        __os->write(v->userID);
        __os->write(v->arrAddtionalData);
        __os->write(v->nAddtionalDataCRC);
    }
};

template<class S>
struct StreamReader< ::TaskDataDef::TaskRequestPtr, S>
{
    static void read(S* __is, ::TaskDataDef::TaskRequestPtr& v)
    {
        __is->read(v->TaskType);
        __is->read(v->strTaskID);
        __is->read(v->userID);
        __is->read(v->arrAddtionalData);
        __is->read(v->nAddtionalDataCRC);
    }
};

template<>
struct StreamableTraits< ::TaskDataDef::TaskRequestResultPtr>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStructClass;
    static const int minWireSize = 18;
    static const bool fixedLength = false;
};

template<class S>
struct StreamWriter< ::TaskDataDef::TaskRequestResultPtr, S>
{
    static void write(S* __os, const ::TaskDataDef::TaskRequestResultPtr& v)
    {
        __os->write(v->objRequst);
        __os->write(v->nResultCode);
        __os->write(v->strComment);
    }
};

template<class S>
struct StreamReader< ::TaskDataDef::TaskRequestResultPtr, S>
{
    static void read(S* __is, ::TaskDataDef::TaskRequestResultPtr& v)
    {
        __is->read(v->objRequst);
        __is->read(v->nResultCode);
        __is->read(v->strComment);
    }
};

template<>
struct StreamableTraits< ::TaskDataDef::TaskResultDataPtr>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStructClass;
    static const int minWireSize = 23;
    static const bool fixedLength = false;
};

template<class S>
struct StreamWriter< ::TaskDataDef::TaskResultDataPtr, S>
{
    static void write(S* __os, const ::TaskDataDef::TaskResultDataPtr& v)
    {
        __os->write(v->objRequestAck);
        __os->write(v->arrPackageData);
        __os->write(v->nPackageCRC);
    }
};

template<class S>
struct StreamReader< ::TaskDataDef::TaskResultDataPtr, S>
{
    static void read(S* __is, ::TaskDataDef::TaskResultDataPtr& v)
    {
        __is->read(v->objRequestAck);
        __is->read(v->arrPackageData);
        __is->read(v->nPackageCRC);
    }
};

}

#endif
