SET(APPLICATION_NAME ServerFacilityPlane)

SET(APPLICATION_DESCRIPTION_SUMMARY  "测试启动程序")
MESSAGE("**********************Setting up ${APPLICATION_NAME}********************")

# 定义项目版本
SET(CPACK_PACKAGE_VERSION_MAJOR 1)
SET(CPACK_PACKAGE_VERSION_MINOR 1)
SET(CPACK_PACKAGE_VERSION_PATCH 1)

SET(APPLICATION_VERSION  ${CPACK_PACKAGE_VERSION_MAJOR}.${CPACK_PACKAGE_VERSION_MINOR}.${CPACK_PACKAGE_VERSION_PATCH})
SET(RELEASE_NAME APPLICATION_DESCRIPTION_SUMMARY)
# Note the version no is Mmmpp for Major/minor/patch, 0-padded, thus '10100' for 1.1.0
SET(APPLICATION_VERSION_INT 10000)
MESSAGE("Application version:" ${APPLICATION_VERSION})

SET(CMAKE_MODULE_PATH "${PROJECT_SOURCE_DIR}/CMakeModules")
MESSAGE("********************${CMAKE_MODULE_PATH}********************************")

SET(CMAKE_SHARED_LINKER_FLAGS "${CMAKE_SHARED_LINKER_FLAGS} /NODEFAULTLIB:LIBCMTD")
  
#ADD_DEFINITIONS(-DCONSOLE)

FIND_PACKAGE(QtUtility REQUIRED)
INCLUDE_DIRECTORIES(${QTUTILITY_INCLUDE_DIR}) 

FIND_PACKAGE(UtilityKit REQUIRED)
INCLUDE_DIRECTORIES(${UTILITYKIT_INCLUDE_DIR})

# 设置QT UI文件
FILE(GLOB QT_UIS "*.ui")

#FILE(GLOB MOC_HDRS "*.h")
SET(MOC_HDRS 
ServerDialog.h
)

IF(Qt5Widgets_FOUND)
    QT5_ADD_RESOURCES( LIB_RC_SRCS ${LIB_QT_RCS} )
    QT5_WRAP_UI( UI_HDRS ${QT_UIS} )
    IF(Qt5Widgets_VERSION VERSION_LESS 5.2.0)
		QT5_WRAP_CPP( MOC_UI_SRCS ${UI_HDRS} OPTIONS "-f" )
        QT5_WRAP_CPP( MOC_SRCS ${MOC_HDRS} OPTIONS "-f" )
    ELSE()
		QT5_WRAP_CPP( MOC_UI_SRCS ${UI_HDRS})
        QT5_WRAP_CPP( MOC_SRCS ${MOC_HDRS} )
    ENDIF()
ELSE()
    INCLUDE( ${QT_USE_FILE} )
    QT4_ADD_RESOURCES( LIB_RC_SRCS ${LIB_QT_RCS} )
    QT4_WRAP_UI( UI_HDRS ${QT_UIS} )
    QT4_WRAP_CPP( UI_SRCS ${UI_HDRS} )
	QT5_WRAP_CPP( MOC_UI_SRCS ${UI_HDRS} OPTIONS "-f" )
    QT4_WRAP_CPP( MOC_SRCS ${MOC_HDRS} OPTIONS "-f" )
ENDIF()

#F:/work_luli/TEST/cmake_test/Build/src/App/ui_mainwindow.h
# 设置头文件

FILE(GLOB ${APPLICATION_NAME}_SRCS "*.cpp" )
FILE(GLOB ${APPLICATION_NAME}_HEADERS "./*.h")

SET(APP_PUBLIC_HEADERS
#   header files go here
	${${APPLICATION_NAME}_HEADERS}	
    ${UI_HDRS}
    ${QT_UIS}
	${MOC_HDRS}
)

INCLUDE_DIRECTORIES(
	${CMAKE_CURRENT_BINARY_DIR}
	${UI_HDRS}
	${DEFAULT_INCLUDE_SUBDIR}
	${DEFAULT_INCLUDE_SUBDIR}/8050PubDef
	${DEFAULT_INCLUDE_SUBDIR}/8050PubDef/XMLSerializer
	${DEFAULT_INCLUDE_SUBDIR}/8050PubDef/FCXMLData
	${DEFAULT_INCLUDE_SUBDIR}/8050PubDef/DynamicUIItem
)



#打包相关文件成可执行文件
ADD_EXECUTABLE(${APPLICATION_NAME} 
   ${${APPLICATION_NAME}_HEADERS}
   ${${APPLICATION_NAME}_SRCS}
   ${MOC_UI_SRCS}
   ${MOC_SRCS}
   ${FCXMLDATA_SRCS}
)

LINK_WITH_VARIABLES(${APPLICATION_NAME} 
	QTUTILITY_LIBRARY
)

TARGET_LINK_LIBRARIES(${APPLICATION_NAME}
	FCXMLData
	DynamicUIItem
)

IF ( Qt5Widgets_FOUND )
    qt5_use_modules( ${APPLICATION_NAME} Gui Widgets OpenGL Xml Svg Test Network)
ELSE()   
TARGET_LINK_LIBRARIES(${APPLICATION_NAME}
${QT_LIBRARIES} 
	${QT_QTOPENGL_LIBRARY} 
	${QT_QTCORE_LIBRARY} 
	${QT_QTGUI_LIBRARY} 
	${QT_QTSVG_LIBRARY}
	${QT_QTTEST_LIBRARY}
	${QT_QTXML_LIBRARY}
)
ENDIF( Qt5Widgets_FOUND )

#configure_file(app.config ${PROJECT_SOURCE_DIR}/bin/Debug @ONLY) 
#configure_file(app.config ${PROJECT_SOURCE_DIR}/bin/Release @ONLY) 

# 设置工程的属性
SET (TARGET_OUTPUT_NAME ${APPLICATION_NAME} )
SET_TARGET_PROPERTIES( ${APPLICATION_NAME} PROPERTIES OUTPUT_NAME ${TARGET_OUTPUT_NAME} )
SET_TARGET_PROPERTIES(${APPLICATION_NAME} PROPERTIES DEBUG_OUTPUT_NAME "${TARGET_OUTPUT_NAME}${CMAKE_DEBUG_POSTFIX}")
SET_TARGET_PROPERTIES(${APPLICATION_NAME} PROPERTIES RELEASE_OUTPUT_NAME "${TARGET_OUTPUT_NAME}${CMAKE_RELEASE_POSTFIX}")

# 设置与QT designer 集成
SET_TARGET_PROPERTIES(${APPLICATION_NAME} PROPERTIES VS_KEYWORD "Qt4VSv1.0")


 
# 设置项目标签.
SET_TARGET_PROPERTIES(${APPLICATION_NAME} PROPERTIES PROJECT_LABEL "App ${APPLICATION_NAME}")

SET_TARGET_PROPERTIES(${APPLICATION_NAME} PROPERTIES FOLDER "Applications") 

#SET_TARGET_PROPERTIES(${APPLICATION_NAME} PROPERTIES INSTALL_RPATH_USE_LINK_PATH true)
 
# QT 临时产生文件分组
SOURCE_GROUP(
    "Generated Files"
    FILES 
		${${APPLICATION_NAME}_MOC_SRCS}
		${${APPLICATION_NAME}_UIS_H}
		${FCXMLDATA_SRC}
)
# QT UI文件分组
SOURCE_GROUP(
    "Form Files"
    FILES  ${QT_UIS}} 
)


#输出到上级目录，取消debug, release 目录
IF (MSVC_IDE) 
	SET_TARGET_PROPERTIES( ${APPLICATION_NAME} PROPERTIES RUNTIME_OUTPUT_DIRECTORY  ${PROJECT_SOURCE_DIR}/bin )
	SET_TARGET_PROPERTIES( ${APPLICATION_NAME} PROPERTIES RUNTIME_OUTPUT_DIRECTORY_DEBUG ${PROJECT_SOURCE_DIR}/bin/Debug )
	SET_TARGET_PROPERTIES( ${APPLICATION_NAME} PROPERTIES RUNTIME_OUTPUT_DIRECTORY_RELEASE ${PROJECT_SOURCE_DIR}/bin/Release)
ENDIF() 
  



# debug 安装
INSTALL(
TARGETS ${APPLICATION_NAME}
RUNTIME DESTINATION bin/Debug
)
	

# release 安装
INSTALL(
TARGETS ${APPLICATION_NAME}
RUNTIME DESTINATION bin/release
)
	
	
# present the packaging option only if we have the cpack command defined (effectively >= 2.6.0)
IF(CMAKE_CPACK_COMMAND)
    OPTION(BUILD_VIRE_PACKAGES "Set to ON to generate CPack configuration files and packaging targets" OFF)
    IF(BUILD_VIRE_PACKAGES)
      INCLUDE(VIRECPack)
    ENDIF(BUILD_VIRE_PACKAGES)
ENDIF(CMAKE_CPACK_COMMAND)

INSTALL(CODE "MESSAGE(\"Installing App:${APPLICATION_NAME}..\")")


MESSAGE(STATUS "CMAKE_SOURCE_DIR:"${CMAKE_SOURCE_DIR})
MESSAGE(STATUS "PROJECT_BINARY_DIR:"${PROJECT_BINARY_DIR})
MESSAGE(STATUS "APPLICATION_SRCS:"${${APPLICATION_NAME}_SRCS}“)
MESSAGE(STATUS "APPLICATION_SOURCE_DIR:"${${APPLICATION_NAME}_SOURCE_DIR}“)
MESSAGE(STATUS "APPLICATION_SRCS:"${${APPLICATION_NAME}_SRCS}“)
MESSAGE(STATUS "CMAKE_CACHEFILE_DIR:"${CMAKE_CACHEFILE_DIR}“)
MESSAGE(STATUS "CMAKE_CURRENT_LIST_DIR:"${CMAKE_CURRENT_LIST_DIR}“)
MESSAGE(STATUS "PROJECT_BINARY_DIR:"${PROJECT_BINARY_DIR}“)
MESSAGE(STATUS "APPLICATION_SRCS:"${CMAKE_CURRENT_LIST_DIR}“)
MESSAGE(STATUS "APPLICATION_SRCS:"${CMAKE_SOURCE_DIR}“)

#FIND_FILE(MY_UI_FILES ui_mainwindow.h ${PROJECT_BINARY_DIR}.\src\app)
#ESSAGE(STATUS "FIND_FILE:"${MY_UI_FILES})





