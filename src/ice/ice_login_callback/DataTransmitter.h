// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `DataTransmitter.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef __DataTransmitter_h__
#define __DataTransmitter_h__

#include <Ice/ProxyF.h>
#include <Ice/ObjectF.h>
#include <Ice/Exception.h>
#include <Ice/LocalObject.h>
#include <Ice/StreamHelpers.h>
#include <Ice/Proxy.h>
#include <Ice/Object.h>
#include <Ice/Outgoing.h>
#include <Ice/OutgoingAsync.h>
#include <Ice/Incoming.h>
#include <Ice/Direct.h>
#include <Ice/FactoryTableInit.h>
#include <IceUtil/ScopedArray.h>
#include <IceUtil/Optional.h>
#include <Ice/StreamF.h>
#include <Ice/UndefSysMacros.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 305
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 1
#       error Ice patch level mismatch!
#   endif
#endif

namespace IceProxy
{

namespace DataTransmitter
{

class DataProc;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::DataTransmitter::DataProc>&);
::IceProxy::Ice::Object* upCast(::IceProxy::DataTransmitter::DataProc*);

}

}

namespace DataTransmitter
{

class DataProc;
bool operator==(const DataProc&, const DataProc&);
bool operator<(const DataProc&, const DataProc&);
::Ice::Object* upCast(::DataTransmitter::DataProc*);
typedef ::IceInternal::Handle< ::DataTransmitter::DataProc> DataProcPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::DataTransmitter::DataProc> DataProcPrx;
void __patch(DataProcPtr&, const ::Ice::ObjectPtr&);

}

namespace DataTransmitter
{

typedef ::std::vector< ::Ice::Byte> ArrayData;

enum emTaskType
{
    TaskTestDataRecv,
    TaskFileTransfer,
    TaskCaculate,
    TaskOther
};

class TaskInfo : public IceUtil::Shared
{
public:
    
    TaskInfo() {}
    TaskInfo(const ::std::string& __ice_strTaskID, const ::std::string& __ice_strTaskUser, ::DataTransmitter::emTaskType __ice_taskType) :
        strTaskID(__ice_strTaskID),
        strTaskUser(__ice_strTaskUser),
        taskType(__ice_taskType)
    {
    }
    

    ::std::string strTaskID;
    ::std::string strTaskUser;
    ::DataTransmitter::emTaskType taskType;

    bool operator==(const TaskInfo& __rhs) const
    {
        if(this == &__rhs)
        {
            return true;
        }
        if(strTaskID != __rhs.strTaskID)
        {
            return false;
        }
        if(strTaskUser != __rhs.strTaskUser)
        {
            return false;
        }
        if(taskType != __rhs.taskType)
        {
            return false;
        }
        return true;
    }

    bool operator<(const TaskInfo& __rhs) const
    {
        if(this == &__rhs)
        {
            return false;
        }
        if(strTaskID < __rhs.strTaskID)
        {
            return true;
        }
        else if(__rhs.strTaskID < strTaskID)
        {
            return false;
        }
        if(strTaskUser < __rhs.strTaskUser)
        {
            return true;
        }
        else if(__rhs.strTaskUser < strTaskUser)
        {
            return false;
        }
        if(taskType < __rhs.taskType)
        {
            return true;
        }
        else if(__rhs.taskType < taskType)
        {
            return false;
        }
        return false;
    }

    bool operator!=(const TaskInfo& __rhs) const
    {
        return !operator==(__rhs);
    }
    bool operator<=(const TaskInfo& __rhs) const
    {
        return operator<(__rhs) || operator==(__rhs);
    }
    bool operator>(const TaskInfo& __rhs) const
    {
        return !operator<(__rhs) && !operator==(__rhs);
    }
    bool operator>=(const TaskInfo& __rhs) const
    {
        return !operator<(__rhs);
    }
};

typedef ::IceUtil::Handle< ::DataTransmitter::TaskInfo> TaskInfoPtr;

class DataInfo : public IceUtil::Shared
{
public:
    
    DataInfo() {}
    DataInfo(::Ice::Int __ice_nDataTotalSize, ::Ice::Int __ice_nEveryPackSize, ::Ice::Int __ice_nPackageCount) :
        nDataTotalSize(__ice_nDataTotalSize),
        nEveryPackSize(__ice_nEveryPackSize),
        nPackageCount(__ice_nPackageCount)
    {
    }
    

    ::Ice::Int nDataTotalSize;
    ::Ice::Int nEveryPackSize;
    ::Ice::Int nPackageCount;

    bool operator==(const DataInfo& __rhs) const
    {
        if(this == &__rhs)
        {
            return true;
        }
        if(nDataTotalSize != __rhs.nDataTotalSize)
        {
            return false;
        }
        if(nEveryPackSize != __rhs.nEveryPackSize)
        {
            return false;
        }
        if(nPackageCount != __rhs.nPackageCount)
        {
            return false;
        }
        return true;
    }

    bool operator<(const DataInfo& __rhs) const
    {
        if(this == &__rhs)
        {
            return false;
        }
        if(nDataTotalSize < __rhs.nDataTotalSize)
        {
            return true;
        }
        else if(__rhs.nDataTotalSize < nDataTotalSize)
        {
            return false;
        }
        if(nEveryPackSize < __rhs.nEveryPackSize)
        {
            return true;
        }
        else if(__rhs.nEveryPackSize < nEveryPackSize)
        {
            return false;
        }
        if(nPackageCount < __rhs.nPackageCount)
        {
            return true;
        }
        else if(__rhs.nPackageCount < nPackageCount)
        {
            return false;
        }
        return false;
    }

    bool operator!=(const DataInfo& __rhs) const
    {
        return !operator==(__rhs);
    }
    bool operator<=(const DataInfo& __rhs) const
    {
        return operator<(__rhs) || operator==(__rhs);
    }
    bool operator>(const DataInfo& __rhs) const
    {
        return !operator<(__rhs) && !operator==(__rhs);
    }
    bool operator>=(const DataInfo& __rhs) const
    {
        return !operator<(__rhs);
    }
};

typedef ::IceUtil::Handle< ::DataTransmitter::DataInfo> DataInfoPtr;

struct SendDataInfo
{
    ::DataTransmitter::TaskInfoPtr objTaskInfo;
    ::DataTransmitter::ArrayData additionalInfo;
    ::DataTransmitter::DataInfoPtr objDataInfo;
};

struct CheckDataInfo
{
    ::DataTransmitter::TaskInfoPtr objTaskInfo;
    ::Ice::Int nTaskDataCRC;

    bool operator==(const CheckDataInfo& __rhs) const
    {
        if(this == &__rhs)
        {
            return true;
        }
        if(objTaskInfo != __rhs.objTaskInfo)
        {
            return false;
        }
        if(nTaskDataCRC != __rhs.nTaskDataCRC)
        {
            return false;
        }
        return true;
    }

    bool operator<(const CheckDataInfo& __rhs) const
    {
        if(this == &__rhs)
        {
            return false;
        }
        if(objTaskInfo < __rhs.objTaskInfo)
        {
            return true;
        }
        else if(__rhs.objTaskInfo < objTaskInfo)
        {
            return false;
        }
        if(nTaskDataCRC < __rhs.nTaskDataCRC)
        {
            return true;
        }
        else if(__rhs.nTaskDataCRC < nTaskDataCRC)
        {
            return false;
        }
        return false;
    }

    bool operator!=(const CheckDataInfo& __rhs) const
    {
        return !operator==(__rhs);
    }
    bool operator<=(const CheckDataInfo& __rhs) const
    {
        return operator<(__rhs) || operator==(__rhs);
    }
    bool operator>(const CheckDataInfo& __rhs) const
    {
        return !operator<(__rhs) && !operator==(__rhs);
    }
    bool operator>=(const CheckDataInfo& __rhs) const
    {
        return !operator<(__rhs);
    }
};

class SendDataPackage : public IceUtil::Shared
{
public:
    
    SendDataPackage() {}
    SendDataPackage(const ::std::string& __ice_strTaskID, ::Ice::Int __ice_nPackageIndex, const ::DataTransmitter::ArrayData& __ice_arrData, ::Ice::Int __ice_nPackageCRC) :
        strTaskID(__ice_strTaskID),
        nPackageIndex(__ice_nPackageIndex),
        arrData(__ice_arrData),
        nPackageCRC(__ice_nPackageCRC)
    {
    }
    

    ::std::string strTaskID;
    ::Ice::Int nPackageIndex;
    ::DataTransmitter::ArrayData arrData;
    ::Ice::Int nPackageCRC;
};

typedef ::IceUtil::Handle< ::DataTransmitter::SendDataPackage> SendDataPackagePtr;

class RequestCanceledException : public ::Ice::UserException
{
public:

    RequestCanceledException() {}
    virtual ~RequestCanceledException() throw();

    virtual ::std::string ice_name() const;
    virtual RequestCanceledException* ice_clone() const;
    virtual void ice_throw() const;

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    #ifdef __SUNPRO_CC
    using ::Ice::UserException::__writeImpl;
    using ::Ice::UserException::__readImpl;
    #endif
};

static RequestCanceledException __RequestCanceledException_init;

}

namespace Ice
{
template<>
struct StreamableTraits< ::DataTransmitter::emTaskType>
{
    static const StreamHelperCategory helper = StreamHelperCategoryEnum;
    static const int minValue = 0;
    static const int maxValue = 3;
    static const int minWireSize = 1;
    static const bool fixedLength = false;
};

template<>
struct StreamableTraits< ::DataTransmitter::TaskInfoPtr>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStructClass;
    static const int minWireSize = 3;
    static const bool fixedLength = false;
};

template<class S>
struct StreamWriter< ::DataTransmitter::TaskInfoPtr, S>
{
    static void write(S* __os, const ::DataTransmitter::TaskInfoPtr& v)
    {
        __os->write(v->strTaskID);
        __os->write(v->strTaskUser);
        __os->write(v->taskType);
    }
};

template<class S>
struct StreamReader< ::DataTransmitter::TaskInfoPtr, S>
{
    static void read(S* __is, ::DataTransmitter::TaskInfoPtr& v)
    {
        __is->read(v->strTaskID);
        __is->read(v->strTaskUser);
        __is->read(v->taskType);
    }
};

template<>
struct StreamableTraits< ::DataTransmitter::DataInfoPtr>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStructClass;
    static const int minWireSize = 12;
    static const bool fixedLength = true;
};

template<class S>
struct StreamWriter< ::DataTransmitter::DataInfoPtr, S>
{
    static void write(S* __os, const ::DataTransmitter::DataInfoPtr& v)
    {
        __os->write(v->nDataTotalSize);
        __os->write(v->nEveryPackSize);
        __os->write(v->nPackageCount);
    }
};

template<class S>
struct StreamReader< ::DataTransmitter::DataInfoPtr, S>
{
    static void read(S* __is, ::DataTransmitter::DataInfoPtr& v)
    {
        __is->read(v->nDataTotalSize);
        __is->read(v->nEveryPackSize);
        __is->read(v->nPackageCount);
    }
};

template<>
struct StreamableTraits< ::DataTransmitter::SendDataInfo>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 16;
    static const bool fixedLength = false;
};

template<class S>
struct StreamWriter< ::DataTransmitter::SendDataInfo, S>
{
    static void write(S* __os, const ::DataTransmitter::SendDataInfo& v)
    {
        __os->write(v.objTaskInfo);
        __os->write(v.additionalInfo);
        __os->write(v.objDataInfo);
    }
};

template<class S>
struct StreamReader< ::DataTransmitter::SendDataInfo, S>
{
    static void read(S* __is, ::DataTransmitter::SendDataInfo& v)
    {
        __is->read(v.objTaskInfo);
        __is->read(v.additionalInfo);
        __is->read(v.objDataInfo);
    }
};

template<>
struct StreamableTraits< ::DataTransmitter::CheckDataInfo>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 7;
    static const bool fixedLength = false;
};

template<class S>
struct StreamWriter< ::DataTransmitter::CheckDataInfo, S>
{
    static void write(S* __os, const ::DataTransmitter::CheckDataInfo& v)
    {
        __os->write(v.objTaskInfo);
        __os->write(v.nTaskDataCRC);
    }
};

template<class S>
struct StreamReader< ::DataTransmitter::CheckDataInfo, S>
{
    static void read(S* __is, ::DataTransmitter::CheckDataInfo& v)
    {
        __is->read(v.objTaskInfo);
        __is->read(v.nTaskDataCRC);
    }
};

template<>
struct StreamableTraits< ::DataTransmitter::SendDataPackagePtr>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStructClass;
    static const int minWireSize = 10;
    static const bool fixedLength = false;
};

template<class S>
struct StreamWriter< ::DataTransmitter::SendDataPackagePtr, S>
{
    static void write(S* __os, const ::DataTransmitter::SendDataPackagePtr& v)
    {
        __os->write(v->strTaskID);
        __os->write(v->nPackageIndex);
        __os->write(v->arrData);
        __os->write(v->nPackageCRC);
    }
};

template<class S>
struct StreamReader< ::DataTransmitter::SendDataPackagePtr, S>
{
    static void read(S* __is, ::DataTransmitter::SendDataPackagePtr& v)
    {
        __is->read(v->strTaskID);
        __is->read(v->nPackageIndex);
        __is->read(v->arrData);
        __is->read(v->nPackageCRC);
    }
};

template<>
struct StreamableTraits< ::DataTransmitter::RequestCanceledException>
{
    static const StreamHelperCategory helper = StreamHelperCategoryUserException;
};

}

namespace DataTransmitter
{

class Callback_DataProc_setReadySendDataInfo_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_DataProc_setReadySendDataInfo_Base> Callback_DataProc_setReadySendDataInfoPtr;

class Callback_DataProc_sendData_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_DataProc_sendData_Base> Callback_DataProc_sendDataPtr;

class Callback_DataProc_checkTaskDataInfo_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_DataProc_checkTaskDataInfo_Base> Callback_DataProc_checkTaskDataInfoPtr;

}

namespace IceProxy
{

namespace DataTransmitter
{

class DataProc : virtual public ::IceProxy::Ice::Object
{
public:

    void setReadySendDataInfo(const ::DataTransmitter::SendDataInfo& dataInfo)
    {
        setReadySendDataInfo(dataInfo, 0);
    }
    void setReadySendDataInfo(const ::DataTransmitter::SendDataInfo& dataInfo, const ::Ice::Context& __ctx)
    {
        setReadySendDataInfo(dataInfo, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_setReadySendDataInfo(const ::DataTransmitter::SendDataInfo& dataInfo, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_setReadySendDataInfo(dataInfo, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_setReadySendDataInfo(const ::DataTransmitter::SendDataInfo& dataInfo, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setReadySendDataInfo(dataInfo, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setReadySendDataInfo(const ::DataTransmitter::SendDataInfo& dataInfo, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_setReadySendDataInfo(dataInfo, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setReadySendDataInfo(const ::DataTransmitter::SendDataInfo& dataInfo, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setReadySendDataInfo(dataInfo, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_setReadySendDataInfo(const ::DataTransmitter::SendDataInfo& dataInfo)
    {
        return begin_setReadySendDataInfo(dataInfo, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setReadySendDataInfo(const ::DataTransmitter::SendDataInfo& dataInfo, const ::Ice::Context& __ctx)
    {
        return begin_setReadySendDataInfo(dataInfo, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setReadySendDataInfo(const ::DataTransmitter::SendDataInfo& dataInfo, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setReadySendDataInfo(dataInfo, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setReadySendDataInfo(const ::DataTransmitter::SendDataInfo& dataInfo, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setReadySendDataInfo(dataInfo, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setReadySendDataInfo(const ::DataTransmitter::SendDataInfo& dataInfo, const ::DataTransmitter::Callback_DataProc_setReadySendDataInfoPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setReadySendDataInfo(dataInfo, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setReadySendDataInfo(const ::DataTransmitter::SendDataInfo& dataInfo, const ::Ice::Context& __ctx, const ::DataTransmitter::Callback_DataProc_setReadySendDataInfoPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setReadySendDataInfo(dataInfo, &__ctx, __del, __cookie);
    }

    void end_setReadySendDataInfo(const ::Ice::AsyncResultPtr&);
    
private:

    void setReadySendDataInfo(const ::DataTransmitter::SendDataInfo&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_setReadySendDataInfo(const ::DataTransmitter::SendDataInfo&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void sendData(const ::DataTransmitter::SendDataPackagePtr& dataPackage)
    {
        sendData(dataPackage, 0);
    }
    void sendData(const ::DataTransmitter::SendDataPackagePtr& dataPackage, const ::Ice::Context& __ctx)
    {
        sendData(dataPackage, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_sendData(const ::DataTransmitter::SendDataPackagePtr& dataPackage, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_sendData(dataPackage, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_sendData(const ::DataTransmitter::SendDataPackagePtr& dataPackage, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_sendData(dataPackage, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_sendData(const ::DataTransmitter::SendDataPackagePtr& dataPackage, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_sendData(dataPackage, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_sendData(const ::DataTransmitter::SendDataPackagePtr& dataPackage, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_sendData(dataPackage, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_sendData(const ::DataTransmitter::SendDataPackagePtr& dataPackage)
    {
        return begin_sendData(dataPackage, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_sendData(const ::DataTransmitter::SendDataPackagePtr& dataPackage, const ::Ice::Context& __ctx)
    {
        return begin_sendData(dataPackage, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_sendData(const ::DataTransmitter::SendDataPackagePtr& dataPackage, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_sendData(dataPackage, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_sendData(const ::DataTransmitter::SendDataPackagePtr& dataPackage, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_sendData(dataPackage, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_sendData(const ::DataTransmitter::SendDataPackagePtr& dataPackage, const ::DataTransmitter::Callback_DataProc_sendDataPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_sendData(dataPackage, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_sendData(const ::DataTransmitter::SendDataPackagePtr& dataPackage, const ::Ice::Context& __ctx, const ::DataTransmitter::Callback_DataProc_sendDataPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_sendData(dataPackage, &__ctx, __del, __cookie);
    }

    void end_sendData(const ::Ice::AsyncResultPtr&);
    
private:

    void sendData(const ::DataTransmitter::SendDataPackagePtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_sendData(const ::DataTransmitter::SendDataPackagePtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    bool checkTaskDataInfo(const ::DataTransmitter::CheckDataInfo& checkInfo)
    {
        return checkTaskDataInfo(checkInfo, 0);
    }
    bool checkTaskDataInfo(const ::DataTransmitter::CheckDataInfo& checkInfo, const ::Ice::Context& __ctx)
    {
        return checkTaskDataInfo(checkInfo, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_checkTaskDataInfo(const ::DataTransmitter::CheckDataInfo& checkInfo, const ::IceInternal::Function<void (bool)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_checkTaskDataInfo(checkInfo, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_checkTaskDataInfo(const ::DataTransmitter::CheckDataInfo& checkInfo, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_checkTaskDataInfo(checkInfo, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_checkTaskDataInfo(const ::DataTransmitter::CheckDataInfo& checkInfo, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (bool)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_checkTaskDataInfo(checkInfo, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_checkTaskDataInfo(const ::DataTransmitter::CheckDataInfo& checkInfo, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_checkTaskDataInfo(checkInfo, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_checkTaskDataInfo(const ::DataTransmitter::CheckDataInfo& checkInfo, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (bool)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (bool)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::DataTransmitter::DataProcPrx __proxy = ::DataTransmitter::DataProcPrx::uncheckedCast(__result->getProxy());
                bool __ret;
                try
                {
                    __ret = __proxy->end_checkTaskDataInfo(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (bool)> _response;
        };
        return begin_checkTaskDataInfo(checkInfo, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_checkTaskDataInfo(const ::DataTransmitter::CheckDataInfo& checkInfo)
    {
        return begin_checkTaskDataInfo(checkInfo, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_checkTaskDataInfo(const ::DataTransmitter::CheckDataInfo& checkInfo, const ::Ice::Context& __ctx)
    {
        return begin_checkTaskDataInfo(checkInfo, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_checkTaskDataInfo(const ::DataTransmitter::CheckDataInfo& checkInfo, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_checkTaskDataInfo(checkInfo, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_checkTaskDataInfo(const ::DataTransmitter::CheckDataInfo& checkInfo, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_checkTaskDataInfo(checkInfo, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_checkTaskDataInfo(const ::DataTransmitter::CheckDataInfo& checkInfo, const ::DataTransmitter::Callback_DataProc_checkTaskDataInfoPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_checkTaskDataInfo(checkInfo, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_checkTaskDataInfo(const ::DataTransmitter::CheckDataInfo& checkInfo, const ::Ice::Context& __ctx, const ::DataTransmitter::Callback_DataProc_checkTaskDataInfoPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_checkTaskDataInfo(checkInfo, &__ctx, __del, __cookie);
    }

    bool end_checkTaskDataInfo(const ::Ice::AsyncResultPtr&);
    
private:

    bool checkTaskDataInfo(const ::DataTransmitter::CheckDataInfo&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_checkTaskDataInfo(const ::DataTransmitter::CheckDataInfo&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    
    ::IceInternal::ProxyHandle<DataProc> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<DataProc*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<DataProc> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<DataProc*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<DataProc> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<DataProc*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<DataProc> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<DataProc*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<DataProc> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<DataProc*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<DataProc> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<DataProc*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<DataProc> ice_secure(bool __secure) const
    {
        return dynamic_cast<DataProc*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<DataProc> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<DataProc*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<DataProc> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<DataProc*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<DataProc> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<DataProc*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<DataProc> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<DataProc*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<DataProc> ice_twoway() const
    {
        return dynamic_cast<DataProc*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<DataProc> ice_oneway() const
    {
        return dynamic_cast<DataProc*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<DataProc> ice_batchOneway() const
    {
        return dynamic_cast<DataProc*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<DataProc> ice_datagram() const
    {
        return dynamic_cast<DataProc*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<DataProc> ice_batchDatagram() const
    {
        return dynamic_cast<DataProc*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<DataProc> ice_compress(bool __compress) const
    {
        return dynamic_cast<DataProc*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<DataProc> ice_timeout(int __timeout) const
    {
        return dynamic_cast<DataProc*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<DataProc> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<DataProc*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<DataProc> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<DataProc*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    static const ::std::string& ice_staticId();

private: 

    virtual ::IceInternal::Handle< ::IceDelegateM::Ice::Object> __createDelegateM();
    virtual ::IceInternal::Handle< ::IceDelegateD::Ice::Object> __createDelegateD();
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

}

}

namespace IceDelegate
{

namespace DataTransmitter
{

class DataProc : virtual public ::IceDelegate::Ice::Object
{
public:

    virtual void setReadySendDataInfo(const ::DataTransmitter::SendDataInfo&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void sendData(const ::DataTransmitter::SendDataPackagePtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual bool checkTaskDataInfo(const ::DataTransmitter::CheckDataInfo&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;
};

}

}

namespace IceDelegateM
{

namespace DataTransmitter
{

class DataProc : virtual public ::IceDelegate::DataTransmitter::DataProc,
                 virtual public ::IceDelegateM::Ice::Object
{
public:

    virtual void setReadySendDataInfo(const ::DataTransmitter::SendDataInfo&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void sendData(const ::DataTransmitter::SendDataPackagePtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual bool checkTaskDataInfo(const ::DataTransmitter::CheckDataInfo&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);
};

}

}

namespace IceDelegateD
{

namespace DataTransmitter
{

class DataProc : virtual public ::IceDelegate::DataTransmitter::DataProc,
                 virtual public ::IceDelegateD::Ice::Object
{
public:

    virtual void setReadySendDataInfo(const ::DataTransmitter::SendDataInfo&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void sendData(const ::DataTransmitter::SendDataPackagePtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual bool checkTaskDataInfo(const ::DataTransmitter::CheckDataInfo&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);
};

}

}

namespace DataTransmitter
{

class DataProc : virtual public ::Ice::Object
{
public:

    typedef DataProcPrx ProxyType;
    typedef DataProcPtr PointerType;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();

    virtual void setReadySendDataInfo(const ::DataTransmitter::SendDataInfo&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___setReadySendDataInfo(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void sendData(const ::DataTransmitter::SendDataPackagePtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___sendData(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual bool checkTaskDataInfo(const ::DataTransmitter::CheckDataInfo&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___checkTaskDataInfo(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::DispatchStatus __dispatch(::IceInternal::Incoming&, const ::Ice::Current&);

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    #ifdef __SUNPRO_CC
    using ::Ice::Object::__writeImpl;
    using ::Ice::Object::__readImpl;
    #endif
};

inline bool operator==(const DataProc& l, const DataProc& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const DataProc& l, const DataProc& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

}

namespace DataTransmitter
{

template<class T>
class CallbackNC_DataProc_setReadySendDataInfo : public Callback_DataProc_setReadySendDataInfo_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_DataProc_setReadySendDataInfo(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_DataProc_setReadySendDataInfoPtr
newCallback_DataProc_setReadySendDataInfo(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_DataProc_setReadySendDataInfo<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_DataProc_setReadySendDataInfoPtr
newCallback_DataProc_setReadySendDataInfo(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_DataProc_setReadySendDataInfo<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_DataProc_setReadySendDataInfoPtr
newCallback_DataProc_setReadySendDataInfo(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_DataProc_setReadySendDataInfo<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_DataProc_setReadySendDataInfoPtr
newCallback_DataProc_setReadySendDataInfo(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_DataProc_setReadySendDataInfo<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_DataProc_setReadySendDataInfo : public Callback_DataProc_setReadySendDataInfo_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_DataProc_setReadySendDataInfo(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_DataProc_setReadySendDataInfoPtr
newCallback_DataProc_setReadySendDataInfo(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_DataProc_setReadySendDataInfo<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_DataProc_setReadySendDataInfoPtr
newCallback_DataProc_setReadySendDataInfo(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_DataProc_setReadySendDataInfo<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_DataProc_setReadySendDataInfoPtr
newCallback_DataProc_setReadySendDataInfo(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_DataProc_setReadySendDataInfo<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_DataProc_setReadySendDataInfoPtr
newCallback_DataProc_setReadySendDataInfo(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_DataProc_setReadySendDataInfo<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_DataProc_sendData : public Callback_DataProc_sendData_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_DataProc_sendData(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_DataProc_sendDataPtr
newCallback_DataProc_sendData(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_DataProc_sendData<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_DataProc_sendDataPtr
newCallback_DataProc_sendData(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_DataProc_sendData<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_DataProc_sendDataPtr
newCallback_DataProc_sendData(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_DataProc_sendData<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_DataProc_sendDataPtr
newCallback_DataProc_sendData(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_DataProc_sendData<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_DataProc_sendData : public Callback_DataProc_sendData_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_DataProc_sendData(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_DataProc_sendDataPtr
newCallback_DataProc_sendData(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_DataProc_sendData<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_DataProc_sendDataPtr
newCallback_DataProc_sendData(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_DataProc_sendData<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_DataProc_sendDataPtr
newCallback_DataProc_sendData(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_DataProc_sendData<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_DataProc_sendDataPtr
newCallback_DataProc_sendData(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_DataProc_sendData<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_DataProc_checkTaskDataInfo : public Callback_DataProc_checkTaskDataInfo_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(bool);

    CallbackNC_DataProc_checkTaskDataInfo(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::DataTransmitter::DataProcPrx __proxy = ::DataTransmitter::DataProcPrx::uncheckedCast(__result->getProxy());
        bool __ret;
        try
        {
            __ret = __proxy->end_checkTaskDataInfo(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_DataProc_checkTaskDataInfoPtr
newCallback_DataProc_checkTaskDataInfo(const IceUtil::Handle<T>& instance, void (T::*cb)(bool), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_DataProc_checkTaskDataInfo<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_DataProc_checkTaskDataInfoPtr
newCallback_DataProc_checkTaskDataInfo(T* instance, void (T::*cb)(bool), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_DataProc_checkTaskDataInfo<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_DataProc_checkTaskDataInfo : public Callback_DataProc_checkTaskDataInfo_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(bool, const CT&);

    Callback_DataProc_checkTaskDataInfo(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::DataTransmitter::DataProcPrx __proxy = ::DataTransmitter::DataProcPrx::uncheckedCast(__result->getProxy());
        bool __ret;
        try
        {
            __ret = __proxy->end_checkTaskDataInfo(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_DataProc_checkTaskDataInfoPtr
newCallback_DataProc_checkTaskDataInfo(const IceUtil::Handle<T>& instance, void (T::*cb)(bool, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_DataProc_checkTaskDataInfo<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_DataProc_checkTaskDataInfoPtr
newCallback_DataProc_checkTaskDataInfo(T* instance, void (T::*cb)(bool, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_DataProc_checkTaskDataInfo<T, CT>(instance, cb, excb, sentcb);
}

}

#endif
