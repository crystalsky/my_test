SET(APPLICATION_NAME QtExe_OSG_Delta3D)

SET(APPLICATION_DESCRIPTION_SUMMARY  "���������")
MESSAGE("**********************Setting up ${APPLICATION_NAME}********************")

# ������Ŀ�汾
SET(CPACK_PACKAGE_VERSION_MAJOR 1)
SET(CPACK_PACKAGE_VERSION_MINOR 1)
SET(CPACK_PACKAGE_VERSION_PATCH 2)

SET(APPLICATION_VERSION  ${CPACK_PACKAGE_VERSION_MAJOR}.${CPACK_PACKAGE_VERSION_MINOR}.${CPACK_PACKAGE_VERSION_PATCH})
SET(RELEASE_NAME APPLICATION_DESCRIPTION_SUMMARY)
# Note the version no is Mmmpp for Major/minor/patch, 0-padded, thus '10100' for 1.1.0
SET(APPLICATION_VERSION_INT 10000)
MESSAGE("Application version:" ${APPLICATION_VERSION})

SET(CMAKE_SHARED_LINKER_FLAGS "${CMAKE_SHARED_LINKER_FLAGS} /NODEFAULTLIB:LIBCMTD")

#FIND_PACKAGE(OSG REQUIRED)
#INCLUDE_DIRECTORIES(${OSG_INCLUDE_DIR})  

FIND_PACKAGE(DELTA3D REQUIRED)
INCLUDE_DIRECTORIES(${DELTA3D_INCLUDE_DIR})

FIND_PACKAGE(RIBBON REQUIRED)
INCLUDE_DIRECTORIES(${RIBBON_INCLUDE_DIR})

FIND_PACKAGE(OSG REQUIRED)
INCLUDE_DIRECTORIES(${OSG_INCLUDE_DIR} ${QT_INCLUDES})  

FIND_PACKAGE(OpenThreads REQUIRED)
INCLUDE_DIRECTORIES(${OPENTHREADS_INCLUDE_DIR})

#BOOST
set(Boost_DEBUG 1) 
SET(Boost_NO_BOOST_CMAKE 		OFF)
set(Boost_USE_STATIC_LIBS       ON)
set(Boost_USE_MULTITHREADED    	ON)
FIND_PACKAGE(Boost 1.5.7 REQUIRED 
	COMPONENTS 
		log 
		filesystem
		graph
		iostreams
		system
		signals
	)
INCLUDE_DIRECTORIES(${Boost_INCLUDE_DIR})

INCLUDE_DIRECTORIES(${PROJECT_SRC_DIR}/library_src/gloglib)
INCLUDE_DIRECTORIES(${PROJECT_SRC_DIR}/library_src/QtUtility)
INCLUDE_DIRECTORIES(${PROJECT_SRC_DIR}/library_src/color_picker)
INCLUDE_DIRECTORIES(${PROJECT_SRC_DIR}/library_src/UtilityKit)
INCLUDE_DIRECTORIES(${PROJECT_SRC_DIR}/library_src/QtTreePropertyBrowser)
ADD_DEFINITIONS(-DCONSOLE)
 
set(CMAKE_AUTOMOC ON)
set(CMAKE_INCLUDE_CURRENT_DIR ON) 
 
# ����QT UI�ļ�
FILE(GLOB QT_UIS "*.ui")
FILE(GLOB LIB_QT_RCS "*.qrc")

IF(Qt5Widgets_FOUND)
    QT5_ADD_RESOURCES( LIB_RC_SRCS ${LIB_QT_RCS} )
    QT5_WRAP_UI( UI_HDRS ${QT_UIS} )
    IF(Qt5Widgets_VERSION VERSION_LESS 5.2.0)
		QT5_WRAP_CPP( MOC_UI_SRCS ${UI_HDRS} OPTIONS "-f" )
    ELSE()
		QT5_WRAP_CPP( MOC_UI_SRCS ${UI_HDRS})
    ENDIF()
ELSE()
    INCLUDE( ${QT_USE_FILE} )
    QT4_ADD_RESOURCES( LIB_RC_SRCS ${LIB_QT_RCS} )
    QT4_WRAP_UI( UI_HDRS ${QT_UIS} )
    QT4_WRAP_CPP( UI_SRCS ${UI_HDRS} )
	QT4_WRAP_CPP( MOC_UI_SRCS ${UI_HDRS} OPTIONS "-f" )
ENDIF()

# ����ͷ�ļ�
FILE(GLOB ${APPLICATION_NAME}_SRCS "*.cpp" )
FILE(GLOB ${APPLICATION_NAME}_HEADERS "./*.h")

#QtGUIStudy
FILE(GLOB QtGUI_STUDY_HEADER "./QtGUIStudy/*.h")
FILE(GLOB QtGUI_STUDY_SRCS "./QtGUIStudy/*.cpp")

#QMLStudy
FILE(GLOB QML_STUDY_HEADER "./QMLStudy/*.h")
FILE(GLOB QML_STUDY_SRCS "./QMLStudy/*.cpp")

#QtCore
FILE(GLOB QtCore_STUDY_HEADER "./QtCoreStudy/*.h")
FILE(GLOB QtCore_STUDY_SRCS "./QtCoreStudy/*.cpp")

#Boost
FILE(GLOB Boost_STUDY_HEADER "./BoostStudy/*.h")
FILE(GLOB Boost_STUDY_SRCS "./BoostStudy/*.cpp")

#OtherTest
FILE(GLOB OtherTest_EMDataShow_HEADER "./OtherTest/EMDataShow/*.h")
FILE(GLOB OtherTest_EMDataShow_SRCS "./OtherTest/EMDataShow/*.cpp")

#tinyXML
#FILE(GLOB TinyXML_SRCS "./tinyxml/*.h" "./tinyxml/*.cpp")

INCLUDE_DIRECTORIES(
	${CMAKE_CURRENT_BINARY_DIR}
	${UI_HDRS}
	${PROJECT_INCLUDE_DIR}
)

#�������ļ��ɿ�ִ���ļ�
ADD_EXECUTABLE(${APPLICATION_NAME} 
   ${${APPLICATION_NAME}_HEADERS}
   ${${APPLICATION_NAME}_SRCS}
   ${MOC_UI_SRCS}
   ${LIB_RC_SRCS}
   
   ${QtGUI_STUDY_HEADER}
   ${QtGUI_STUDY_SRCS}
   
   ${QML_STUDY_HEADER}
   ${QML_STUDY_SRCS}
   
   ${QtCore_STUDY_HEADER}
   ${QtCore_STUDY_SRCS}
   
   ${Boost_STUDY_HEADER}
   ${Boost_STUDY_SRCS}
   
   ${OtherTest_EMDataShow_HEADER}
   ${OtherTest_EMDataShow_SRCS}
   
   ${TinyXML_SRCS}
)

#����Link������
TARGET_LINK_LIBRARIES(${APPLICATION_NAME}
	${XMLFOUNDATION_LIBRARIES}
	gloglib
	UtilityKit
	QtColorPickerLib
)

LINK_WITH_VARIABLES(${APPLICATION_NAME} 
		DTCORE_LIBRARY
		DTUTIL_LIBRARY
		OSGDB_LIBRARY
		OSGGA_LIBRARY	
		OSGUTIL_LIBRARY
		OSGSIM_LIBRARY
		OSG_LIBRARY
		OPENTHREADS_LIBRARY
		QTUTILITY_LIBRARY
		RIBBON_LIBRARY
		Boost_DATE_TIME_LIBRARY
		Boost_SIGNAL_LIBRARY
)

IF ( Qt5Widgets_FOUND )
    qt5_use_modules( ${APPLICATION_NAME} Gui Widgets OpenGL Xml Svg Test Quick Concurrent)
ELSE()   
TARGET_LINK_LIBRARIES(${APPLICATION_NAME}
${QT_LIBRARIES} 
	${QT_QTOPENGL_LIBRARY} 
	${QT_QTCORE_LIBRARY} 
	${QT_QTGUI_LIBRARY} 
	${QT_QTSVG_LIBRARY}
	${QT_QTTEST_LIBRARY}
	${QT_QTXML_LIBRARY}
)
ENDIF( Qt5Widgets_FOUND )

#configure_file(app.config ${PROJECT_SOURCE_DIR}/bin/Debug @ONLY) 
#configure_file(app.config ${PROJECT_SOURCE_DIR}/bin/Release @ONLY) 

# ���ù��̵�����
SET (TARGET_OUTPUT_NAME ${APPLICATION_NAME} )
SET_TARGET_PROPERTIES( ${APPLICATION_NAME} PROPERTIES OUTPUT_NAME ${TARGET_OUTPUT_NAME} )
SET_TARGET_PROPERTIES(${APPLICATION_NAME} PROPERTIES DEBUG_OUTPUT_NAME "${TARGET_OUTPUT_NAME}${CMAKE_DEBUG_POSTFIX}")
SET_TARGET_PROPERTIES(${APPLICATION_NAME} PROPERTIES RELEASE_OUTPUT_NAME "${TARGET_OUTPUT_NAME}${CMAKE_RELEASE_POSTFIX}")

# ������QT designer ����
SET_TARGET_PROPERTIES(${APPLICATION_NAME} PROPERTIES VS_KEYWORD "Qt4VSv1.0")


 
# ������Ŀ��ǩ.
SET_TARGET_PROPERTIES(${APPLICATION_NAME} PROPERTIES PROJECT_LABEL "App ${APPLICATION_NAME}")
SET_TARGET_PROPERTIES(${APPLICATION_NAME} PROPERTIES FOLDER "App") 
 
# QT ��ʱ�����ļ�����
SOURCE_GROUP(
    "Generated Files"
    FILES 
		${MOC_UI_SRCS}
)

# QT UI�ļ�����
SOURCE_GROUP(
    "Form Files"
    FILES  
	${QT_UIS}
	${LIB_RC_SRCS}
	${LIB_QT_RCS}
)

SOURCE_GROUP(
    "_Study_QtGui"
    FILES 
		${QtGUI_STUDY_HEADER}
		${QtGUI_STUDY_SRCS}
)

SOURCE_GROUP(
    "_Study_QML"
    FILES 
		${QML_STUDY_HEADER}
		${QML_STUDY_SRCS}
)

SOURCE_GROUP(
    "_Study_QtCore"
    FILES 
	${QtCore_STUDY_HEADER}
   ${QtCore_STUDY_SRCS}
)

SOURCE_GROUP(
    "_Study_Boost"
    FILES 
	${Boost_STUDY_HEADER}
	${Boost_STUDY_SRCS}
)

SOURCE_GROUP(
    "_OtherTest_EMDataShow"
    FILES 
		${OtherTest_EMDataShow_HEADER}
		${OtherTest_EMDataShow_SRCS}
)

SOURCE_GROUP(
    "TinyXML"
    FILES 
		${TinyXML_SRCS}
)

#������ϼ�Ŀ¼��ȡ��debug, release Ŀ¼
IF (MSVC_IDE) 
	SET_TARGET_PROPERTIES( ${APPLICATION_NAME} PROPERTIES RUNTIME_OUTPUT_DIRECTORY  ${PROJECT_SOURCE_DIR}/bin )
	SET_TARGET_PROPERTIES( ${APPLICATION_NAME} PROPERTIES RUNTIME_OUTPUT_DIRECTORY_DEBUG ${PROJECT_SOURCE_DIR}/bin/Debug )
	SET_TARGET_PROPERTIES( ${APPLICATION_NAME} PROPERTIES RUNTIME_OUTPUT_DIRECTORY_RELEASE ${PROJECT_SOURCE_DIR}/bin/Release)
ENDIF() 
  



# debug ��װ
INSTALL(
TARGETS ${APPLICATION_NAME}
RUNTIME DESTINATION bin/Debug
)
	

# release ��װ
INSTALL(
TARGETS ${APPLICATION_NAME}
RUNTIME DESTINATION bin/release
)
	
INSTALL(CODE "MESSAGE(\"Installing App:${APPLICATION_NAME}..\")")





